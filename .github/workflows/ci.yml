# Junction CI Pipeline

name: Main tests

# Controls when the workflow will run
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: 'Cleanup build folder'
        run: |
          ls -la ./
          sudo rm -rf ./* || true
          sudo rm -rf ./.??* || true
          ls -la ./

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        name: Checkout submodules
        with:
          submodules: recursive

      - name: Extract glibc submodule commit
        run:  /bin/bash -c "echo -n glibc_commit=; (git ls-tree HEAD lib/glibc | awk '{print \$3}')" >> $GITHUB_ENV

      - name: Extract caladan submodule commit
        run:  /bin/bash -c "echo -n caladan_commit=; (git ls-tree HEAD lib/caladan | awk '{print \$3}')" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Retrieve cached glibc binaries
        with:
          path: |
            bin/glibc
            lib/.glibc_installed_ver
          key: ${{ runner.os }}-build-${{ env.glibc_commit }}-glibc-${{ hashFiles('lib/patches/glibc/*') }}

      - uses: actions/cache@v4
        name: Retrieve cached caladan submodule binaries
        with:
          path: |
            lib/caladan/dpdk/build
            lib/caladan/rdma-core/build
            lib/caladan/deps/pcm/build
            lib/.caladan_installed_ver
          key: ${{ runner.os }}-build-${{ env.caladan_commit }}-caladan-${{ hashFiles('lib/patches/caladan/*') }}

      - uses: actions/cache@v4
        name: Retrieve cached python venv
        with:
          path: |
            bin/venv
          key: ${{ runner.os }}-build-venv-${{ hashFiles('scripts/install_function_bench.sh') }}

      - name: Install
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-12 g++-12
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 10
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 10
          ./scripts/install.sh

      - name: Build
        run: |
          ./scripts/build.sh

      - name: Build debug
        run: |
          ./scripts/build.sh -d

      - name: Test
        run: ./scripts/test.sh

      - name: Test debug
        run: ./scripts/test.sh -d

      - name: Build snapshot tests
        run: |
          ./scripts/build.sh -s

      - name: Build snapshot tests (debug)
        run: |
          ./scripts/build.sh -d -s

      - name: Test (ELF snapshots)
        run: ./scripts/test.sh 'snapshot_elf|restore_elf'
        if: ${{ always() }}
        # Update job status if this step fails
        env:
          JOB_STATUS: ${{ steps.set-job-status.outcome == 'failure' && 'failure' || env.JOB_STATUS }}

      - name: Test (JIF snapshots w/ post-processing)
        run: ./scripts/test.sh 'snapshot_jif|build_itree|restore_itrees_jif'
        if: ${{ always() }}
        # Update job status if this step fails
        env:
          JOB_STATUS: ${{ steps.set-job-status.outcome == 'failure' && 'failure' || env.JOB_STATUS }}

      # - name: Test (JIF snapshots w/out post-processing)
      #   run: ./scripts/test.sh 'snapshot_jif|restore_jif'
      #   if: ${{ always() }}
      #   # Update job status if this step fails
      #   env:
      #     JOB_STATUS: ${{ steps.set-job-status.outcome == 'failure' && 'failure' || env.JOB_STATUS }}

      - name: Test debug (ELF snapshots)
        run: ./scripts/test.sh -d 'snapshot_elf|restore_elf'
        if: ${{ always() }}
        # Update job status if this step fails
        env:
          JOB_STATUS: ${{ steps.set-job-status.outcome == 'failure' && 'failure' || env.JOB_STATUS }}

      - name: Test debug (JIF snapshots w/ post-processing)
        run: ./scripts/test.sh -d 'snapshot_jif|build_itree|restore_itrees_jif'
        if: ${{ always() }}
        # Update job status if this step fails
        env:
          JOB_STATUS: ${{ steps.set-job-status.outcome == 'failure' && 'failure' || env.JOB_STATUS }}

      # - name: Test debug (JIF snapshots w/out post-processing)
      #   run: ./scripts/test.sh -d 'snapshot_jif|restore_jif'
      #   if: ${{ always() }}
      #   # Update job status if this step fails
      #   env:
      #     JOB_STATUS: ${{ steps.set-job-status.outcome == 'failure' && 'failure' || env.JOB_STATUS }}
