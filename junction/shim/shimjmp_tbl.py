#!/usr/bin/env python3

import sys
import os

assert len(sys.argv) == 4

SHIM_FN_DEFS = sys.argv[1]
OUTPUT_FILE_TBL = sys.argv[2]
OUTPUT_FILE_SHIM = sys.argv[3]


def parse():
    with open(SHIM_FN_DEFS) as f:
        dat = f.read().splitlines()

    fns = []
    for line in dat:
        line = line.strip()
        if not line or line.startswith("#"):
            continue
        lx = list(map(str.strip, line.split(",")))
        if len(lx) < 2:
            print(lx)
            assert False
        fns.append(lx)

    return fns


fns = parse()

filename = os.path.basename(OUTPUT_FILE_TBL)
dispatch_file = [
    f"// {filename} - Generated by shimjmptbl.py - do not modify",
    "",
    ""]
dispatch_file += ["#include \"junction/shim/shim.h\""]

dispatch_file += ["namespace junction {"]

dispatch_file += [
    f"void *shim_jmptbl[junction::CallNumber::NR_SHIM_CALL] = {'{'}"]
for lx in fns:
    name = lx[1]
    dispatch_file.append(f"\t[junction::CallNumber::{name}] = reinterpret_cast<void *>(&junction::shim_{name}),")
dispatch_file.append("};")

# finish file and write it out
dispatch_file.append("}  // namespace junction")

with open(OUTPUT_FILE_TBL, "w") as f:
    f.write("\n".join(dispatch_file))

filename = os.path.basename(OUTPUT_FILE_SHIM)
with open(OUTPUT_FILE_SHIM, "w") as f:
    f.write(f"// {filename} - Generated by shimjmptbl.py - do not modify\n\n")
    f.write("#include \"junction/shim/shim.h\"\n\n")
    f.write("extern \"C\" {\n#include <errno.h>\n")
    f.write("#include <stdarg.h>\n")
    f.write("#include <stdint.h>\n")

    for lx in fns:
        retType = lx[0]
        fnName = lx[1]
        args = lx[2:]

        if fnName in [
            "pthread_mutex_lock",
            "pthread_mutex_trylock",
                "pthread_mutex_unlock"]:
            continue

        # Header line
        f.write(f"{retType} {fnName}(")
        for idx, typ in enumerate(args):
            if typ == "...":
                nm = "..."
                typ = ""
            else:
                nm = f"arg{idx}"
            f.write(f"{', ' if idx > 0 else ''}{typ} {nm}")
        f.write(") {\n")

        f.write(f"\tauto fn = reinterpret_cast<decltype({fnName}) **>(0x202000 + 8 * junction::CallNumber::{fnName});\n")

        if "..." in args:
            assert args[-1] == "..."
            f.write("\tva_list args;\n")
            f.write(f"\tva_start(args, arg{len(args) - 2});\n")

        call = "(*fn)("
        for i in range(len(args)):
            nm = "&args" if args[i] == "..." else f"arg{i}"
            call += f"{', ' if i > 0 else ''}{nm}"
        call += ");\n"

        if retType == "void":
            f.write(f"\t{call}\n{'}'}\n\n")
            continue

        f.write(f"\tauto ret = {call}\n")

        if "..." in args:
            f.write("\tva_end(args);\n")

        isPtrTyp = retType.endswith("*")
        errVal = "nullptr" if isPtrTyp else "-1"
        castN = "reinterpret_cast<intptr_t>" if isPtrTyp else ""

        f.write(f"\tif (__builtin_expect({castN}(ret) < 0, 0)) {'{'} errno = -{castN}(ret); return {errVal}; {'}'}\n")
        f.write("\treturn ret;\n}\n\n")

    f.write("} // extern \"C\"")
