// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_CONTROLREQUEST_JUNCTION_CTL_SCHEMA_H_
#define FLATBUFFERS_GENERATED_CONTROLREQUEST_JUNCTION_CTL_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
                  FLATBUFFERS_VERSION_MINOR == 3 &&
                  FLATBUFFERS_VERSION_REVISION == 7,
              "Non-compatible flatbuffers version included");

namespace junction {
namespace ctl_schema {

struct RunRequest;
struct RunRequestBuilder;

struct SnapshotRequest;
struct SnapshotRequestBuilder;

struct RestoreRequest;
struct RestoreRequestBuilder;

struct StartTraceRequest;
struct StartTraceRequestBuilder;

struct StopTraceRequest;
struct StopTraceRequestBuilder;

struct SignalRequest;
struct SignalRequestBuilder;

struct GetStatsRequest;
struct GetStatsRequestBuilder;

struct Request;
struct RequestBuilder;

enum InnerRequest : uint8_t {
  InnerRequest_NONE = 0,
  InnerRequest_run = 1,
  InnerRequest_snapshot = 2,
  InnerRequest_restore = 3,
  InnerRequest_startTrace = 4,
  InnerRequest_stopTrace = 5,
  InnerRequest_signal = 6,
  InnerRequest_getStats = 7,
  InnerRequest_MIN = InnerRequest_NONE,
  InnerRequest_MAX = InnerRequest_getStats
};

inline const InnerRequest (&EnumValuesInnerRequest())[8] {
  static const InnerRequest values[] = {
      InnerRequest_NONE,    InnerRequest_run,        InnerRequest_snapshot,
      InnerRequest_restore, InnerRequest_startTrace, InnerRequest_stopTrace,
      InnerRequest_signal,  InnerRequest_getStats};
  return values;
}

inline const char *const *EnumNamesInnerRequest() {
  static const char *const names[9] = {"NONE",    "run",        "snapshot",
                                       "restore", "startTrace", "stopTrace",
                                       "signal",  "getStats",   nullptr};
  return names;
}

inline const char *EnumNameInnerRequest(InnerRequest e) {
  if (::flatbuffers::IsOutRange(e, InnerRequest_NONE, InnerRequest_getStats))
    return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesInnerRequest()[index];
}

template <typename T>
struct InnerRequestTraits {
  static const InnerRequest enum_value = InnerRequest_NONE;
};

template <>
struct InnerRequestTraits<junction::ctl_schema::RunRequest> {
  static const InnerRequest enum_value = InnerRequest_run;
};

template <>
struct InnerRequestTraits<junction::ctl_schema::SnapshotRequest> {
  static const InnerRequest enum_value = InnerRequest_snapshot;
};

template <>
struct InnerRequestTraits<junction::ctl_schema::RestoreRequest> {
  static const InnerRequest enum_value = InnerRequest_restore;
};

template <>
struct InnerRequestTraits<junction::ctl_schema::StartTraceRequest> {
  static const InnerRequest enum_value = InnerRequest_startTrace;
};

template <>
struct InnerRequestTraits<junction::ctl_schema::StopTraceRequest> {
  static const InnerRequest enum_value = InnerRequest_stopTrace;
};

template <>
struct InnerRequestTraits<junction::ctl_schema::SignalRequest> {
  static const InnerRequest enum_value = InnerRequest_signal;
};

template <>
struct InnerRequestTraits<junction::ctl_schema::GetStatsRequest> {
  static const InnerRequest enum_value = InnerRequest_getStats;
};

bool VerifyInnerRequest(::flatbuffers::Verifier &verifier, const void *obj,
                        InnerRequest type);
bool VerifyInnerRequestVector(
    ::flatbuffers::Verifier &verifier,
    const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values,
    const ::flatbuffers::Vector<uint8_t> *types);

struct RunRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RunRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ARGV = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *
  argv() const {
    return GetPointer<const ::flatbuffers::Vector<
        ::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ARGV);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *
  mutable_argv() {
    return GetPointer<
        ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(
        VT_ARGV);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) && VerifyOffset(verifier, VT_ARGV) &&
           verifier.VerifyVector(argv()) &&
           verifier.VerifyVectorOfStrings(argv()) && verifier.EndTable();
  }
};

struct RunRequestBuilder {
  typedef RunRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_argv(
      ::flatbuffers::Offset<
          ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>>
          argv) {
    fbb_.AddOffset(RunRequest::VT_ARGV, argv);
  }
  explicit RunRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
      : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RunRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RunRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RunRequest> CreateRunRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<
        ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>>
        argv = 0) {
  RunRequestBuilder builder_(_fbb);
  builder_.add_argv(argv);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RunRequest> CreateRunRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *argv =
        nullptr) {
  auto argv__ =
      argv ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(
                 *argv)
           : 0;
  return junction::ctl_schema::CreateRunRequest(_fbb, argv__);
}

struct SnapshotRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SnapshotRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PID = 4,
    VT_SNAPSHOT_PATH = 6,
    VT_ELF_PATH = 8
  };
  uint64_t pid() const { return GetField<uint64_t>(VT_PID, 0); }
  bool mutate_pid(uint64_t _pid = 0) {
    return SetField<uint64_t>(VT_PID, _pid, 0);
  }
  const ::flatbuffers::String *snapshot_path() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SNAPSHOT_PATH);
  }
  ::flatbuffers::String *mutable_snapshot_path() {
    return GetPointer<::flatbuffers::String *>(VT_SNAPSHOT_PATH);
  }
  const ::flatbuffers::String *elf_path() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ELF_PATH);
  }
  ::flatbuffers::String *mutable_elf_path() {
    return GetPointer<::flatbuffers::String *>(VT_ELF_PATH);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PID, 8) &&
           VerifyOffset(verifier, VT_SNAPSHOT_PATH) &&
           verifier.VerifyString(snapshot_path()) &&
           VerifyOffset(verifier, VT_ELF_PATH) &&
           verifier.VerifyString(elf_path()) && verifier.EndTable();
  }
};

struct SnapshotRequestBuilder {
  typedef SnapshotRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pid(uint64_t pid) {
    fbb_.AddElement<uint64_t>(SnapshotRequest::VT_PID, pid, 0);
  }
  void add_snapshot_path(
      ::flatbuffers::Offset<::flatbuffers::String> snapshot_path) {
    fbb_.AddOffset(SnapshotRequest::VT_SNAPSHOT_PATH, snapshot_path);
  }
  void add_elf_path(::flatbuffers::Offset<::flatbuffers::String> elf_path) {
    fbb_.AddOffset(SnapshotRequest::VT_ELF_PATH, elf_path);
  }
  explicit SnapshotRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
      : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SnapshotRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SnapshotRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SnapshotRequest> CreateSnapshotRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb, uint64_t pid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> snapshot_path = 0,
    ::flatbuffers::Offset<::flatbuffers::String> elf_path = 0) {
  SnapshotRequestBuilder builder_(_fbb);
  builder_.add_pid(pid);
  builder_.add_elf_path(elf_path);
  builder_.add_snapshot_path(snapshot_path);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SnapshotRequest> CreateSnapshotRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb, uint64_t pid = 0,
    const char *snapshot_path = nullptr, const char *elf_path = nullptr) {
  auto snapshot_path__ = snapshot_path ? _fbb.CreateString(snapshot_path) : 0;
  auto elf_path__ = elf_path ? _fbb.CreateString(elf_path) : 0;
  return junction::ctl_schema::CreateSnapshotRequest(_fbb, pid, snapshot_path__,
                                                     elf_path__);
}

struct RestoreRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RestoreRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SNAPSHOT_PATH = 4,
    VT_ELF_PATH = 6
  };
  const ::flatbuffers::String *snapshot_path() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SNAPSHOT_PATH);
  }
  ::flatbuffers::String *mutable_snapshot_path() {
    return GetPointer<::flatbuffers::String *>(VT_SNAPSHOT_PATH);
  }
  const ::flatbuffers::String *elf_path() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ELF_PATH);
  }
  ::flatbuffers::String *mutable_elf_path() {
    return GetPointer<::flatbuffers::String *>(VT_ELF_PATH);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SNAPSHOT_PATH) &&
           verifier.VerifyString(snapshot_path()) &&
           VerifyOffset(verifier, VT_ELF_PATH) &&
           verifier.VerifyString(elf_path()) && verifier.EndTable();
  }
};

struct RestoreRequestBuilder {
  typedef RestoreRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_snapshot_path(
      ::flatbuffers::Offset<::flatbuffers::String> snapshot_path) {
    fbb_.AddOffset(RestoreRequest::VT_SNAPSHOT_PATH, snapshot_path);
  }
  void add_elf_path(::flatbuffers::Offset<::flatbuffers::String> elf_path) {
    fbb_.AddOffset(RestoreRequest::VT_ELF_PATH, elf_path);
  }
  explicit RestoreRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
      : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RestoreRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RestoreRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RestoreRequest> CreateRestoreRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> snapshot_path = 0,
    ::flatbuffers::Offset<::flatbuffers::String> elf_path = 0) {
  RestoreRequestBuilder builder_(_fbb);
  builder_.add_elf_path(elf_path);
  builder_.add_snapshot_path(snapshot_path);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RestoreRequest> CreateRestoreRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb, const char *snapshot_path = nullptr,
    const char *elf_path = nullptr) {
  auto snapshot_path__ = snapshot_path ? _fbb.CreateString(snapshot_path) : 0;
  auto elf_path__ = elf_path ? _fbb.CreateString(elf_path) : 0;
  return junction::ctl_schema::CreateRestoreRequest(_fbb, snapshot_path__,
                                                    elf_path__);
}

struct StartTraceRequest FLATBUFFERS_FINAL_CLASS
    : private ::flatbuffers::Table {
  typedef StartTraceRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PID = 4
  };
  uint64_t pid() const { return GetField<uint64_t>(VT_PID, 0); }
  bool mutate_pid(uint64_t _pid = 0) {
    return SetField<uint64_t>(VT_PID, _pid, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PID, 8) && verifier.EndTable();
  }
};

struct StartTraceRequestBuilder {
  typedef StartTraceRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pid(uint64_t pid) {
    fbb_.AddElement<uint64_t>(StartTraceRequest::VT_PID, pid, 0);
  }
  explicit StartTraceRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
      : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<StartTraceRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<StartTraceRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<StartTraceRequest> CreateStartTraceRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb, uint64_t pid = 0) {
  StartTraceRequestBuilder builder_(_fbb);
  builder_.add_pid(pid);
  return builder_.Finish();
}

struct StopTraceRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StopTraceRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PID = 4
  };
  uint64_t pid() const { return GetField<uint64_t>(VT_PID, 0); }
  bool mutate_pid(uint64_t _pid = 0) {
    return SetField<uint64_t>(VT_PID, _pid, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PID, 8) && verifier.EndTable();
  }
};

struct StopTraceRequestBuilder {
  typedef StopTraceRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pid(uint64_t pid) {
    fbb_.AddElement<uint64_t>(StopTraceRequest::VT_PID, pid, 0);
  }
  explicit StopTraceRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
      : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<StopTraceRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<StopTraceRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<StopTraceRequest> CreateStopTraceRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb, uint64_t pid = 0) {
  StopTraceRequestBuilder builder_(_fbb);
  builder_.add_pid(pid);
  return builder_.Finish();
}

struct SignalRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SignalRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PID = 4,
    VT_SIGNO = 6
  };
  uint64_t pid() const { return GetField<uint64_t>(VT_PID, 0); }
  bool mutate_pid(uint64_t _pid = 0) {
    return SetField<uint64_t>(VT_PID, _pid, 0);
  }
  uint64_t signo() const { return GetField<uint64_t>(VT_SIGNO, 0); }
  bool mutate_signo(uint64_t _signo = 0) {
    return SetField<uint64_t>(VT_SIGNO, _signo, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PID, 8) &&
           VerifyField<uint64_t>(verifier, VT_SIGNO, 8) && verifier.EndTable();
  }
};

struct SignalRequestBuilder {
  typedef SignalRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pid(uint64_t pid) {
    fbb_.AddElement<uint64_t>(SignalRequest::VT_PID, pid, 0);
  }
  void add_signo(uint64_t signo) {
    fbb_.AddElement<uint64_t>(SignalRequest::VT_SIGNO, signo, 0);
  }
  explicit SignalRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
      : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SignalRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SignalRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SignalRequest> CreateSignalRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb, uint64_t pid = 0,
    uint64_t signo = 0) {
  SignalRequestBuilder builder_(_fbb);
  builder_.add_signo(signo);
  builder_.add_pid(pid);
  return builder_.Finish();
}

struct GetStatsRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GetStatsRequestBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) && verifier.EndTable();
  }
};

struct GetStatsRequestBuilder {
  typedef GetStatsRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit GetStatsRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
      : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GetStatsRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GetStatsRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GetStatsRequest> CreateGetStatsRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  GetStatsRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct Request FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INNER_TYPE = 4,
    VT_INNER = 6
  };
  junction::ctl_schema::InnerRequest inner_type() const {
    return static_cast<junction::ctl_schema::InnerRequest>(
        GetField<uint8_t>(VT_INNER_TYPE, 0));
  }
  const void *inner() const { return GetPointer<const void *>(VT_INNER); }
  template <typename T>
  const T *inner_as() const;
  const junction::ctl_schema::RunRequest *inner_as_run() const {
    return inner_type() == junction::ctl_schema::InnerRequest_run
               ? static_cast<const junction::ctl_schema::RunRequest *>(inner())
               : nullptr;
  }
  const junction::ctl_schema::SnapshotRequest *inner_as_snapshot() const {
    return inner_type() == junction::ctl_schema::InnerRequest_snapshot
               ? static_cast<const junction::ctl_schema::SnapshotRequest *>(
                     inner())
               : nullptr;
  }
  const junction::ctl_schema::RestoreRequest *inner_as_restore() const {
    return inner_type() == junction::ctl_schema::InnerRequest_restore
               ? static_cast<const junction::ctl_schema::RestoreRequest *>(
                     inner())
               : nullptr;
  }
  const junction::ctl_schema::StartTraceRequest *inner_as_startTrace() const {
    return inner_type() == junction::ctl_schema::InnerRequest_startTrace
               ? static_cast<const junction::ctl_schema::StartTraceRequest *>(
                     inner())
               : nullptr;
  }
  const junction::ctl_schema::StopTraceRequest *inner_as_stopTrace() const {
    return inner_type() == junction::ctl_schema::InnerRequest_stopTrace
               ? static_cast<const junction::ctl_schema::StopTraceRequest *>(
                     inner())
               : nullptr;
  }
  const junction::ctl_schema::SignalRequest *inner_as_signal() const {
    return inner_type() == junction::ctl_schema::InnerRequest_signal
               ? static_cast<const junction::ctl_schema::SignalRequest *>(
                     inner())
               : nullptr;
  }
  const junction::ctl_schema::GetStatsRequest *inner_as_getStats() const {
    return inner_type() == junction::ctl_schema::InnerRequest_getStats
               ? static_cast<const junction::ctl_schema::GetStatsRequest *>(
                     inner())
               : nullptr;
  }
  void *mutable_inner() { return GetPointer<void *>(VT_INNER); }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_INNER_TYPE, 1) &&
           VerifyOffset(verifier, VT_INNER) &&
           VerifyInnerRequest(verifier, inner(), inner_type()) &&
           verifier.EndTable();
  }
};

template <>
inline const junction::ctl_schema::RunRequest *
Request::inner_as<junction::ctl_schema::RunRequest>() const {
  return inner_as_run();
}

template <>
inline const junction::ctl_schema::SnapshotRequest *
Request::inner_as<junction::ctl_schema::SnapshotRequest>() const {
  return inner_as_snapshot();
}

template <>
inline const junction::ctl_schema::RestoreRequest *
Request::inner_as<junction::ctl_schema::RestoreRequest>() const {
  return inner_as_restore();
}

template <>
inline const junction::ctl_schema::StartTraceRequest *
Request::inner_as<junction::ctl_schema::StartTraceRequest>() const {
  return inner_as_startTrace();
}

template <>
inline const junction::ctl_schema::StopTraceRequest *
Request::inner_as<junction::ctl_schema::StopTraceRequest>() const {
  return inner_as_stopTrace();
}

template <>
inline const junction::ctl_schema::SignalRequest *
Request::inner_as<junction::ctl_schema::SignalRequest>() const {
  return inner_as_signal();
}

template <>
inline const junction::ctl_schema::GetStatsRequest *
Request::inner_as<junction::ctl_schema::GetStatsRequest>() const {
  return inner_as_getStats();
}

struct RequestBuilder {
  typedef Request Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_inner_type(junction::ctl_schema::InnerRequest inner_type) {
    fbb_.AddElement<uint8_t>(Request::VT_INNER_TYPE,
                             static_cast<uint8_t>(inner_type), 0);
  }
  void add_inner(::flatbuffers::Offset<void> inner) {
    fbb_.AddOffset(Request::VT_INNER, inner);
  }
  explicit RequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Request>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Request> CreateRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    junction::ctl_schema::InnerRequest inner_type =
        junction::ctl_schema::InnerRequest_NONE,
    ::flatbuffers::Offset<void> inner = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_inner(inner);
  builder_.add_inner_type(inner_type);
  return builder_.Finish();
}

inline bool VerifyInnerRequest(::flatbuffers::Verifier &verifier,
                               const void *obj, InnerRequest type) {
  switch (type) {
    case InnerRequest_NONE: {
      return true;
    }
    case InnerRequest_run: {
      auto ptr =
          reinterpret_cast<const junction::ctl_schema::RunRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case InnerRequest_snapshot: {
      auto ptr =
          reinterpret_cast<const junction::ctl_schema::SnapshotRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case InnerRequest_restore: {
      auto ptr =
          reinterpret_cast<const junction::ctl_schema::RestoreRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case InnerRequest_startTrace: {
      auto ptr =
          reinterpret_cast<const junction::ctl_schema::StartTraceRequest *>(
              obj);
      return verifier.VerifyTable(ptr);
    }
    case InnerRequest_stopTrace: {
      auto ptr =
          reinterpret_cast<const junction::ctl_schema::StopTraceRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case InnerRequest_signal: {
      auto ptr =
          reinterpret_cast<const junction::ctl_schema::SignalRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case InnerRequest_getStats: {
      auto ptr =
          reinterpret_cast<const junction::ctl_schema::GetStatsRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default:
      return true;
  }
}

inline bool VerifyInnerRequestVector(
    ::flatbuffers::Verifier &verifier,
    const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values,
    const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyInnerRequest(verifier, values->Get(i),
                            types->GetEnum<InnerRequest>(i))) {
      return false;
    }
  }
  return true;
}

inline const junction::ctl_schema::Request *GetRequest(const void *buf) {
  return ::flatbuffers::GetRoot<junction::ctl_schema::Request>(buf);
}

inline const junction::ctl_schema::Request *GetSizePrefixedRequest(
    const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<junction::ctl_schema::Request>(buf);
}

inline Request *GetMutableRequest(void *buf) {
  return ::flatbuffers::GetMutableRoot<Request>(buf);
}

inline junction::ctl_schema::Request *GetMutableSizePrefixedRequest(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<
      junction::ctl_schema::Request>(buf);
}

inline bool VerifyRequestBuffer(::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<junction::ctl_schema::Request>(nullptr);
}

inline bool VerifySizePrefixedRequestBuffer(::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<junction::ctl_schema::Request>(
      nullptr);
}

inline void FinishRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<junction::ctl_schema::Request> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<junction::ctl_schema::Request> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ctl_schema
}  // namespace junction

#endif  // FLATBUFFERS_GENERATED_CONTROLREQUEST_JUNCTION_CTL_SCHEMA_H_
