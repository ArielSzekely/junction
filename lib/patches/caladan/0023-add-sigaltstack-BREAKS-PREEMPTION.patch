From 6d7f968242ab5aa6ca7ff3e18371245217ba521f Mon Sep 17 00:00:00 2001
From: Josh Fried <joshuafried@gmail.com>
Date: Mon, 20 Feb 2023 17:11:28 -0500
Subject: [PATCH 23/24] add sigaltstack; BREAKS PREEMPTION

---
 inc/runtime/thread.h |  1 +
 runtime/preempt.c    | 15 ++++++++++++++-
 runtime/sched.c      |  7 +++++++
 3 files changed, 22 insertions(+), 1 deletion(-)

diff --git a/inc/runtime/thread.h b/inc/runtime/thread.h
index cc9cf91..0f79da8 100644
--- a/inc/runtime/thread.h
+++ b/inc/runtime/thread.h
@@ -99,6 +99,7 @@ struct stack;
 struct thread {
     struct thread_tf    tf;
     struct list_node    link;
+    struct stack        *syscallstack;
     struct stack        *stack;
     unsigned int        main_thread:1;
     unsigned int        has_fsbase:1;
diff --git a/runtime/preempt.c b/runtime/preempt.c
index b49ab72..470051e 100644
--- a/runtime/preempt.c
+++ b/runtime/preempt.c
@@ -26,6 +26,7 @@ static void set_preempt_needed(void)
 /* handles preemptive cede signals from the iokernel */
 static void handle_sigusr1(int s, siginfo_t *si, void *c)
 {
+	BUG();
 	STAT(PREEMPTIONS)++;
 
 	/* resume execution if preemption is disabled */
@@ -43,6 +44,7 @@ static void handle_sigusr1(int s, siginfo_t *si, void *c)
 /* handles preemptive yield signals from the iokernel */
 static void handle_sigusr2(int s, siginfo_t *si, void *c)
 {
+	BUG();
 	STAT(PREEMPTIONS)++;
 
 	/* resume execution if preemption is disabled */
@@ -94,6 +96,16 @@ void preempt(void)
 
 int preempt_init_thread(void)
 {
+	stack_t ss;
+	ss.ss_sp = malloc(SIGSTKSZ);
+	if (ss.ss_sp == NULL)
+		return -ENOMEM;
+
+	ss.ss_size = SIGSTKSZ;
+	ss.ss_flags = 0;
+	if (sigaltstack(&ss, NULL) == -1)
+		return -errno;
+
 	perthread_store(preempt_cnt, PREEMPT_NOT_PENDING);
 	return 0;
 }
@@ -106,6 +118,7 @@ int preempt_init_thread(void)
  */
 int preempt_init(void)
 {
+#if 0
 	struct sigaction act;
 
 	act.sa_flags = SA_SIGINFO | SA_NODEFER;
@@ -126,6 +139,6 @@ int preempt_init(void)
 		log_err("couldn't register signal handler");
 		return -1;
 	}
-
+#endif
 	return 0;
 }
diff --git a/runtime/sched.c b/runtime/sched.c
index 828be86..abe085d 100644
--- a/runtime/sched.c
+++ b/runtime/sched.c
@@ -830,6 +830,11 @@ static __always_inline thread_t *__thread_create(void)
 	preempt_enable();
 
 	th->stack = s;
+	th->syscallstack = stack_alloc();
+
+	BUG_ON(!th->syscallstack);
+
+
 	th->main_thread = false;
 	th->has_fsbase = false;
 	th->thread_ready = false;
@@ -954,6 +959,8 @@ static void thread_finish_exit(void)
 	gc_remove_thread(th);
 	if (th->stack)
 		stack_free(th->stack);
+	if (th->syscallstack)
+		stack_free(th->syscallstack);
 	tcache_free(perthread_ptr(thread_pt), th);
 	perthread_store(__self, NULL);
 
-- 
2.34.1

