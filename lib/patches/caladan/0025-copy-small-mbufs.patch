From e94bd2006a64b2be44fbf6789393c30604352d20 Mon Sep 17 00:00:00 2001
From: Josh Fried <joshuafried@gmail.com>
Date: Wed, 6 Sep 2023 03:25:51 -0400
Subject: [PATCH 25/31] copy small mbufs

---
 inc/net/mbuf.h                               | 18 +++---
 net/mbuf.c                                   | 29 ---------
 runtime/net/core.c                           |  3 -
 runtime/net/directpath/mlx5/mlx5_rx_stride.c | 64 +++++++++++++++-----
 runtime/net/directpath/mlx5/mlx5_rxtx.c      |  2 -
 5 files changed, 56 insertions(+), 60 deletions(-)
 delete mode 100644 net/mbuf.c

diff --git a/inc/net/mbuf.h b/inc/net/mbuf.h
index 6df4065..3acef82 100644
--- a/inc/net/mbuf.h
+++ b/inc/net/mbuf.h
@@ -23,18 +23,18 @@ struct mbuf {
 	struct mbuf	*next;	   /* the next mbuf in the mbufq */
 	unsigned char	*head;	   /* start of the buffer */
 	unsigned char	*data;	   /* current position within the buffer */
-	unsigned int	head_len;  /* length of the entire buffer from @head */
-	unsigned int	len;	   /* length of the data */
-	unsigned int	csum_type; /* type of checksum */
-	unsigned int	csum;	   /* 16-bit one's complement */
+	unsigned short	head_len;  /* length of the entire buffer from @head */
+	unsigned short	len;	   /* length of the data */
+	unsigned short	transport_off;	/* the offset of the transport header */
+	unsigned short	network_off;	/* the offset of the network header */
 
 	union {
-		unsigned int	txflags;  /* TX offload flags */
-		unsigned int	rss_hash; /* RSS 5-tuple hash from HW */
+		uint8_t	txflags;  /* TX offload flags */
+		uint8_t	csum_type; /* type of checksum */
 	};
 
-	unsigned short	network_off;	/* the offset of the network header */
-	unsigned short	transport_off;	/* the offset of the transport header */
+	uint8_t		flags;	    /* TCP: which flags were set? */
+	atomic_t	ref;	    /* a reference count for the mbuf */
 	unsigned long   release_data;	/* data for the release method */
 	void		(*release)(struct mbuf *m); /* frees the mbuf */
 
@@ -43,8 +43,6 @@ struct mbuf {
 	uint64_t	timestamp;  /* the time the packet was last sent */
 	uint32_t	seg_seq;    /* the first seg number */
 	uint32_t	seg_end;    /* the last seg number (noninclusive) */
-	uint8_t		flags;	    /* which flags were set? */
-	atomic_t	ref;	    /* a reference count for the mbuf */
 };
 
 static inline unsigned char *__mbuf_pull(struct mbuf *m, unsigned int len)
diff --git a/net/mbuf.c b/net/mbuf.c
deleted file mode 100644
index cc1318b..0000000
--- a/net/mbuf.c
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * mbuf.c - buffer management for network packets
- */
-
-#include <string.h>
-
-#include <net/mbuf.h>
-
-/**
- * mbuf_clone - creates an identical copy of an mbuf
- * @dst: the destination mbuf
- * @src: the source mbuf
- *
- * Returns the destination mbuf.
- */
-struct mbuf *mbuf_clone(struct mbuf *dst, struct mbuf *src)
-{
-	/* copy the backing buffer */
-	dst->data = dst->head + mbuf_headroom(src);
-	memcpy(mbuf_put(dst, mbuf_length(src)),
-	       mbuf_data(src), mbuf_length(src));
-
-	/* copy packet metadata */
-	dst->csum_type = src->csum_type;
-	dst->csum = src->csum;
-	dst->txflags = src->txflags; /* NOTE: this is a union */
-
-	return dst;
-}
diff --git a/runtime/net/core.c b/runtime/net/core.c
index 4203641..7a6e2fb 100644
--- a/runtime/net/core.c
+++ b/runtime/net/core.c
@@ -123,8 +123,6 @@ static struct mbuf *net_rx_alloc_mbuf(struct rx_net_hdr *hdr)
 	mbuf_init(m, buf, hdr->len, 0);
 	m->len = hdr->len;
 	m->csum_type = hdr->csum_type;
-	m->csum = hdr->csum;
-	m->rss_hash = hdr->rss_hash;
 
 	m->release = (void (*)(struct mbuf *))sfree;
 
@@ -351,7 +349,6 @@ struct mbuf *net_tx_alloc_mbuf(void)
 
 	buf = (unsigned char *)m + MBUF_HEAD_LEN;
 	mbuf_init(m, buf, net_get_mtu(), MBUF_DEFAULT_HEADROOM);
-	m->csum_type = CHECKSUM_TYPE_NEEDED;
 	m->txflags = 0;
 	m->release_data = 0;
 	m->release = net_tx_release_mbuf;
diff --git a/runtime/net/directpath/mlx5/mlx5_rx_stride.c b/runtime/net/directpath/mlx5/mlx5_rx_stride.c
index f837b78..be70be9 100644
--- a/runtime/net/directpath/mlx5/mlx5_rx_stride.c
+++ b/runtime/net/directpath/mlx5/mlx5_rx_stride.c
@@ -17,6 +17,8 @@
 #define MLX5_MPRQ_STRIDE_NUM_SHIFT 16
 #define MLX5_MPRQ_FILLER_MASK 0x80000000
 
+#define MBUF_COPY_THRESH (2 * CACHE_LINE_SIZE)
+
 /* number of total buffers in rx mempool */
 static size_t nrbufs;
 /* array of ref counters for buffers in rx mempool */
@@ -133,7 +135,8 @@ static inline void mlx5_stride_post_buf(struct mlx5_wq *wq, void *buf, uint32_t
 static void directpath_strided_rx_completion(struct mbuf *m)
 {
 	preempt_disable();
-	dec_sw_ref(m->head, m->release_data);
+	if (m->release_data)
+		dec_sw_ref(m->head, m->release_data);
 	tcache_free(perthread_ptr(mbuf_pt), m);
 	preempt_enable();
 }
@@ -307,14 +310,19 @@ static struct mbuf *mbuf_fill_cqe(void *dbuf, struct mlx5_cqe64 *cqe,
 		return NULL;
 	}
 
-	prefetch(dbuf);
+	/* copy small packets directly into mbuf */
+	if (len <= MBUF_COPY_THRESH) {
+		void *buf = (void *)m + sizeof(*m);
+		memcpy(buf, dbuf + 2, len);
+		dec_sw_ref(dbuf, num_strides);
+		num_strides = 0;
+		dbuf = buf - 2;
+	}
 
 	// NIC pads two 0 bytes for alignment of IP headers etc
 	mbuf_init(m, dbuf + 2, len, 0);
 	m->len = len;
 	m->csum_type = mlx5_csum_ok(cqe);
-	m->csum = 0;
-	m->rss_hash = mlx5_get_rss_result(cqe);
 	m->release = directpath_strided_rx_completion;
 	m->release_data = num_strides;
 
@@ -328,12 +336,18 @@ int mlx5_gather_rx_strided(struct mlx5_rxq *v, struct mbuf **ms,
 	uint8_t opcode;
 	uint16_t wqe_idx, stride_idx, stride_cnt, len;
 	uint32_t byte_cnt, start_head = v->cq.head, strides_consumed = 0;
-	int rx_cnt = 0;
+	int i, rx_cnt = 0;
 	void *buf;
 	struct kthread *k;
 	struct mlx5_cqe64 *cqe;
 	struct mlx5_wq *wq = get_rx_wq(v);
 
+	struct mlx5_cqe64 *cqes[budget];
+	void *bufs[budget];
+	uint32_t byte_cnts[budget];
+
+	assert(budget <= v->cq.cnt);
+
 	k = getk();
 
 	while (rx_cnt < budget && !preempt_cede_needed(k)) {
@@ -356,23 +370,39 @@ int mlx5_gather_rx_strided(struct mlx5_rxq *v, struct mbuf **ms,
 		byte_cnt = be32toh(cqe->byte_cnt);
 		stride_cnt = (byte_cnt & MLX5_MPRQ_STRIDE_NUM_MASK) >>
 				   MLX5_MPRQ_STRIDE_NUM_SHIFT;
-		len = byte_cnt & MLX5_MPRQ_LEN_MASK;
 
 		if (shared_rmp_enabled())
 			dec_hw_ref(wqe_idx, stride_cnt);
-		buf = load_acquire(&wq->buffers[wqe_idx]);
 		strides_consumed += stride_cnt;
 
+		buf = load_acquire(&wq->buffers[wqe_idx]);
 		if (byte_cnt & MLX5_MPRQ_FILLER_MASK) {
 			dec_sw_ref(buf, stride_cnt);
-		} else {
-			buf += stride_idx * DIRECTPATH_STRIDE_SIZE;
-			ms[rx_cnt] = mbuf_fill_cqe(buf, cqe, len, stride_cnt);
-			if (unlikely(!ms[rx_cnt])) {
-				dec_sw_ref(buf, stride_cnt);
-				break;
-			}
-			rx_cnt++;
+			continue;
+		}
+
+		buf += stride_idx * DIRECTPATH_STRIDE_SIZE;
+		prefetch(buf);
+		bufs[rx_cnt] = buf;
+		byte_cnts[rx_cnt] = byte_cnt;
+		cqes[rx_cnt++] = cqe;
+	}
+
+	for (i = 0; i < rx_cnt; i++) {
+		cqe = cqes[i];
+		buf = bufs[i];
+
+		stride_cnt = (byte_cnts[i] & MLX5_MPRQ_STRIDE_NUM_MASK) >>
+				   MLX5_MPRQ_STRIDE_NUM_SHIFT;
+		len = byte_cnts[i] & MLX5_MPRQ_LEN_MASK;
+		ms[i] = mbuf_fill_cqe(buf, cqe, len, stride_cnt);
+		if (unlikely(!ms[i])) {
+			// drop remaining packets
+			for (; i < rx_cnt; i++)
+				dec_sw_ref(bufs[i], (byte_cnts[i] & MLX5_MPRQ_STRIDE_NUM_MASK) >>
+				   MLX5_MPRQ_STRIDE_NUM_SHIFT);
+			rx_cnt = i;
+			break;
 		}
 	}
 
@@ -440,11 +470,13 @@ int mlx5_rx_stride_init_thread(void)
 int mlx5_rx_stride_init(void)
 {
 	int ret;
+	size_t sz;
 
 	if (!cfg_directpath_strided)
 		return 0;
 
-	ret = slab_create(&mbuf_slab, "mbufs", sizeof(struct mbuf), 0);
+	sz = sizeof(struct mbuf) + MBUF_COPY_THRESH;
+	ret = slab_create(&mbuf_slab, "mbufs", sz, 0);
 	if (ret)
 		return ret;
 
diff --git a/runtime/net/directpath/mlx5/mlx5_rxtx.c b/runtime/net/directpath/mlx5/mlx5_rxtx.c
index d870391..34b1fe3 100644
--- a/runtime/net/directpath/mlx5/mlx5_rxtx.c
+++ b/runtime/net/directpath/mlx5/mlx5_rxtx.c
@@ -301,8 +301,6 @@ static void mbuf_fill_cqe(struct mbuf *m, struct mlx5_cqe64 *cqe)
 	mbuf_init(m, (unsigned char *)m + RX_BUF_HEAD, len, 0);
 	m->len = len;
 	m->csum_type = mlx5_csum_ok(cqe);
-	m->csum = 0;
-	m->rss_hash = mlx5_get_rss_result(cqe);
 	m->release = directpath_rx_completion;
 }
 
-- 
2.34.1

