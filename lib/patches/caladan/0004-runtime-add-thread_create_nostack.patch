From 8f75c86b8c57d31d30858fb802a1332400b37c37 Mon Sep 17 00:00:00 2001
From: Josh Fried <joshuafried@gmail.com>
Date: Thu, 24 Nov 2022 21:55:35 -0500
Subject: [PATCH 04/20] runtime: add thread_create_nostack

---
 inc/runtime/thread.h |  1 +
 runtime/sched.c      | 48 +++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 48 insertions(+), 1 deletion(-)

diff --git a/inc/runtime/thread.h b/inc/runtime/thread.h
index 67dcceb..ccc5380 100644
--- a/inc/runtime/thread.h
+++ b/inc/runtime/thread.h
@@ -26,6 +26,7 @@ extern void thread_ready(thread_t *thread);
 extern void thread_ready_head(thread_t *thread);
 extern thread_t *thread_create(thread_fn_t fn, void *arg);
 extern thread_t *thread_create_with_buf(thread_fn_t fn, void **buf, size_t len);
+extern thread_t *thread_create_nostack(thread_fn_t fn, void *arg);
 extern void __set_uthread_specific(thread_t *th, uint64_t val);
 extern uint64_t __get_uthread_specific(thread_t *th);
 extern void set_fsbase(thread_t *th, uint64_t fsbase);
diff --git a/runtime/sched.c b/runtime/sched.c
index 0bf4d43..4f56ccf 100644
--- a/runtime/sched.c
+++ b/runtime/sched.c
@@ -792,6 +792,31 @@ void thread_yield(void)
 	enter_schedule(curth);
 }
 
+static __always_inline thread_t *__thread_create_nostack(void)
+{
+	struct thread *th;
+
+	preempt_disable();
+	th = tcache_alloc(perthread_ptr(thread_pt));
+	if (unlikely(!th)) {
+		preempt_enable();
+		return NULL;
+	}
+
+	th->last_cpu = myk()->curr_cpu;
+	preempt_enable();
+
+	th->stack = NULL;
+	th->main_thread = false;
+	th->has_fsbase = false;
+	th->thread_ready = false;
+	th->thread_running = false;
+	th->tlsvar = 0;
+
+	return th;
+}
+
+
 static __always_inline thread_t *__thread_create(void)
 {
 	struct thread *th;
@@ -823,6 +848,26 @@ static __always_inline thread_t *__thread_create(void)
 	return th;
 }
 
+/**
+ * thread_create_nostack - creates a new thread with no stack
+ * @fn: a function pointer to the starting method of the thread
+ * @arg: an argument passed to @fn
+ *
+ * Returns 0 if successful, otherwise -ENOMEM if out of memory.
+ */
+thread_t *thread_create_nostack(thread_fn_t fn, void *arg)
+{
+	thread_t *th = __thread_create_nostack();
+	if (unlikely(!th))
+		return NULL;
+
+	th->tf.rdi = (uint64_t)arg;
+	th->tf.rbp = (uint64_t)0; /* just in case base pointers are enabled */
+	th->tf.rip = (uint64_t)fn;
+	gc_register_thread(th);
+	return th;
+}
+
 /**
  * thread_create - creates a new thread
  * @fn: a function pointer to the starting method of the thread
@@ -916,7 +961,8 @@ static void thread_finish_exit(void)
 	struct thread *th = thread_self();
 
 	gc_remove_thread(th);
-	stack_free(th->stack);
+	if (th->stack)
+		stack_free(th->stack);
 	tcache_free(perthread_ptr(thread_pt), th);
 	perthread_store(__self, NULL);
 
-- 
2.37.2

