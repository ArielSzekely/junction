From 55735b518fc22d1843ce0da084c84f7373360ccf Mon Sep 17 00:00:00 2001
From: Josh Fried <joshuafried@gmail.com>
Date: Mon, 20 Feb 2023 17:11:28 -0500
Subject: [PATCH 19/20] add support for alternate syscall stacks

some applications do not have space on their stacks for syscalls

support these applications in two ways:
- add a second per-thread stack that can be used for handling syscalls in junction
- add cfg option to use a sigaltstack - this is needed when syscalls are
intercepted with seccomp. using this option disables preemption in the runtime.
---
 inc/runtime/thread.h |  1 +
 runtime/cfg.c        | 10 +++++++++-
 runtime/defs.h       |  1 +
 runtime/preempt.c    | 18 ++++++++++++++++++
 runtime/sched.c      | 11 +++++++++++
 5 files changed, 40 insertions(+), 1 deletion(-)

diff --git a/inc/runtime/thread.h b/inc/runtime/thread.h
index cc9cf91..0f79da8 100644
--- a/inc/runtime/thread.h
+++ b/inc/runtime/thread.h
@@ -99,6 +99,7 @@ struct stack;
 struct thread {
     struct thread_tf    tf;
     struct list_node    link;
+    struct stack        *syscallstack;
     struct stack        *stack;
     unsigned int        main_thread:1;
     unsigned int        has_fsbase:1;
diff --git a/runtime/cfg.c b/runtime/cfg.c
index ac1b9b5..235e261 100644
--- a/runtime/cfg.c
+++ b/runtime/cfg.c
@@ -17,6 +17,7 @@
 int arp_static_count = 0;
 struct cfg_arp_static_entry static_entries[MAX_ARP_STATIC_ENTRIES];
 int preferred_socket = 0;
+bool use_sigaltstack = false;
 
 /*
  * Configuration Options
@@ -352,6 +353,13 @@ static int parse_enable_gc(const char *name, const char *val)
 #endif
 }
 
+static int parse_use_sigaltstack(const char *name, const char *val)
+{
+	use_sigaltstack = true;
+	log_warn("cfg: using sigaltstack, preemption is not supported");
+	return 0;
+}
+
 
 /*
  * Parsing Infrastructure
@@ -388,7 +396,7 @@ static const struct cfg_handler cfg_handlers[] = {
 	{ "enable_storage", parse_enable_storage, false },
 	{ "enable_directpath", parse_enable_directpath, false },
 	{ "enable_gc", parse_enable_gc, false },
-
+	{ "use_sigaltstack", parse_use_sigaltstack, false },
 };
 
 /**
diff --git a/runtime/defs.h b/runtime/defs.h
index d0c4524..0a29fc9 100644
--- a/runtime/defs.h
+++ b/runtime/defs.h
@@ -430,6 +430,7 @@ extern unsigned int cfg_request_hardware_queues;
 extern uint64_t cfg_ht_punish_us;
 extern uint64_t cfg_qdelay_us;
 extern uint64_t cfg_quantum_us;
+extern bool use_sigaltstack;
 
 extern void kthread_park(void);
 extern void kthread_park_now(void);
diff --git a/runtime/preempt.c b/runtime/preempt.c
index b49ab72..4bcee24 100644
--- a/runtime/preempt.c
+++ b/runtime/preempt.c
@@ -94,7 +94,22 @@ void preempt(void)
 
 int preempt_init_thread(void)
 {
+	stack_t ss;
+
 	perthread_store(preempt_cnt, PREEMPT_NOT_PENDING);
+
+	if (!use_sigaltstack)
+		return 0;
+
+	ss.ss_sp = malloc(SIGSTKSZ);
+	if (ss.ss_sp == NULL)
+		return -ENOMEM;
+
+	ss.ss_size = SIGSTKSZ;
+	ss.ss_flags = 0;
+	if (sigaltstack(&ss, NULL) == -1)
+		return -errno;
+
 	return 0;
 }
 
@@ -108,6 +123,9 @@ int preempt_init(void)
 {
 	struct sigaction act;
 
+	if (use_sigaltstack)
+		return 0;
+
 	act.sa_flags = SA_SIGINFO | SA_NODEFER;
 
 	if (sigemptyset(&act.sa_mask) != 0) {
diff --git a/runtime/sched.c b/runtime/sched.c
index 0d4f10d..6c901c9 100644
--- a/runtime/sched.c
+++ b/runtime/sched.c
@@ -791,6 +791,10 @@ static __always_inline thread_t *__thread_create_nostack(void)
 		return NULL;
 	}
 
+	 th->syscallstack = stack_alloc();
+        BUG_ON(!th->syscallstack);
+
+
 	th->last_cpu = myk()->curr_cpu;
 	preempt_enable();
 
@@ -828,6 +832,11 @@ static __always_inline thread_t *__thread_create(void)
 	preempt_enable();
 
 	th->stack = s;
+	th->syscallstack = stack_alloc();
+
+	BUG_ON(!th->syscallstack);
+
+
 	th->main_thread = false;
 	th->has_fsbase = false;
 	th->thread_ready = false;
@@ -952,6 +961,8 @@ static void thread_finish_exit(void)
 	gc_remove_thread(th);
 	if (th->stack)
 		stack_free(th->stack);
+	if (th->syscallstack)
+		stack_free(th->syscallstack);
 	tcache_free(perthread_ptr(thread_pt), th);
 	perthread_store(__self, NULL);
 
-- 
2.37.2

