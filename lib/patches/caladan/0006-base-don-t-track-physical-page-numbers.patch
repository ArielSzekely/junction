From 9ab6ca55c10131907db42bfc5c1864f26b570479 Mon Sep 17 00:00:00 2001
From: Josh Fried <joshuafried@gmail.com>
Date: Tue, 29 Nov 2022 23:48:48 -0500
Subject: [PATCH 6/8] base: don't track physical page numbers

---
 base/page.c     |  9 ---------
 inc/base/page.h | 16 +++-------------
 2 files changed, 3 insertions(+), 22 deletions(-)

diff --git a/base/page.c b/base/page.c
index 4be2e5d..27dde0e 100644
--- a/base/page.c
+++ b/base/page.c
@@ -89,7 +89,6 @@ static void page_free_check(struct page *pg, size_t pgsize) {;}
 static int lgpage_create(struct page *pg, int numa_node)
 {
 	void *pgaddr = lgpage_to_addr(pg);
-	int ret;
 
 	pgaddr = mem_map_anom(pgaddr, PGSIZE_2MB, PGSIZE_2MB, numa_node);
 	if (pgaddr == MAP_FAILED) {
@@ -97,12 +96,6 @@ static int lgpage_create(struct page *pg, int numa_node)
 		return -ENOMEM;
 	}
 
-	ret = mem_lookup_page_phys_addr(pgaddr, PGSIZE_2MB, &pg->paddr);
-	if (ret) {
-		munmap(pgaddr, PGSIZE_2MB);
-		return ret;
-	}
-
 	kref_init(&pg->ref);
 	pg->flags = PAGE_FLAG_LARGE | PAGE_FLAG_IN_USE;
 	return 0;
@@ -112,7 +105,6 @@ static void lgpage_destroy(struct page *pg)
 {
 	munmap(lgpage_to_addr(pg), PGSIZE_2MB);
 	pg->flags = 0;
-	pg->paddr = 0;
 }
 
 static struct page *lgpage_alloc_on_node(int numa_node)
@@ -179,7 +171,6 @@ static struct page *smpage_alloc_on_node(int numa_node)
 	pg = addr_to_smpage(addr);
 	kref_init(&pg->ref);
 	pg->flags = PAGE_FLAG_IN_USE;
-	pg->paddr = addr_to_pa(addr);
 	return pg;
 }
 
diff --git a/inc/base/page.h b/inc/base/page.h
index f5d61f9..f4412a4 100644
--- a/inc/base/page.h
+++ b/inc/base/page.h
@@ -19,10 +19,12 @@ struct page {
 	struct list_node	link;
 	struct slab_node 	*snode;
 	off_t			offset;
-	physaddr_t		paddr;
+	long			pad;
 	long			item_count;
 };
 
+BUILD_ASSERT(PGSIZE_2MB % sizeof(struct page) == 0);
+
 #define PAGE_FLAG_LARGE		0x01 /* page is large */
 #define PAGE_FLAG_IN_USE	0x02 /* page is allocated */
 #define PAGE_FLAG_SLAB		0x04 /* page is used by SLAB */
@@ -153,18 +155,6 @@ static inline void *page_to_addr(struct page *pg)
 	return smpage_to_addr(pg);
 }
 
-/**
- * addr_to_pa - gets the physical address of an address in page memory
- * @addr: the address of (or in) the page
- *
- * Returns the physical address, including the offset.
- */
-static inline physaddr_t addr_to_pa(void *addr)
-{
-	struct page *pg = addr_to_lgpage(addr);
-	return pg->paddr + PGOFF_2MB(addr);
-}
-
 /**
  * smpage_to_lgpage - retrieves the large page struct for a 4kb page
  * @pg: the page
-- 
2.34.1

