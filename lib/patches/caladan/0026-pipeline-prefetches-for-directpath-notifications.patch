From 71f09664acafeb4b073cd84f8031adf0422974f3 Mon Sep 17 00:00:00 2001
From: Josh Fried <joshuafried@gmail.com>
Date: Wed, 19 Jul 2023 22:34:39 -0400
Subject: [PATCH 26/28] pipeline prefetches for directpath notifications

---
 iokernel/directpath/defs.h   |  2 +-
 iokernel/directpath/events.c | 14 ++++++---
 iokernel/directpath/queues.c | 56 +++++++++++++++++++++++++++++++++++-
 3 files changed, 66 insertions(+), 6 deletions(-)

diff --git a/iokernel/directpath/defs.h b/iokernel/directpath/defs.h
index 96c5b21..0344d75 100644
--- a/iokernel/directpath/defs.h
+++ b/iokernel/directpath/defs.h
@@ -28,7 +28,7 @@ extern int events_init(void);
 struct mlx5_eqe;
 struct directpath_ctx;
 extern void directpath_handle_cmd_eqe(struct mlx5_eqe *eqe);
-extern void directpath_handle_completion_eqe(struct mlx5_eqe *eqe);
+extern void directpath_handle_completion_eqe_batch(struct mlx5_eqe **eqe, unsigned int nr);
 extern void directpath_handle_cq_error_eqe(struct mlx5_eqe *eqe);
 extern bool directpath_commands_poll(void);
 extern bool directpath_events_poll(void);
diff --git a/iokernel/directpath/events.c b/iokernel/directpath/events.c
index 9fe8e2e..75306bb 100644
--- a/iokernel/directpath/events.c
+++ b/iokernel/directpath/events.c
@@ -144,22 +144,24 @@ static void eq_update_ci(struct eq *eq, int arm)
 
 bool directpath_events_poll(void)
 {
-	unsigned int i;
+	unsigned int i, nr_compl = 0;
 	struct eq *eq = &main_eq;
 	struct mlx5_eqe *eqe;
 
+	struct mlx5_eqe *eqes[POLL_EQ_BATCH_SIZE];
+
 	for (i = 0; i < POLL_EQ_BATCH_SIZE; i++) {
 		eqe = get_head_eqe(eq);
 		if (!eqe)
 			break;
 
 		switch (eqe->type) {
+			case MLX5_EVENT_TYPE_COMP:
+				eqes[nr_compl++] = eqe;
+				break;
 			case MLX5_EVENT_TYPE_CMD:
 				directpath_handle_cmd_eqe(eqe);
 				break;
-			case MLX5_EVENT_TYPE_COMP:
-				directpath_handle_completion_eqe(eqe);
-				break;
 			case MLX5_EVENT_TYPE_CQ_ERROR:
 				directpath_handle_cq_error_eqe(eqe);
 				break;
@@ -173,6 +175,10 @@ bool directpath_events_poll(void)
 
 	if (i > 0) {
 		STAT_INC(DIRECTPATH_EVENTS, i);
+
+		if (nr_compl)
+			directpath_handle_completion_eqe_batch(eqes, nr_compl);
+
 		eq_update_ci(eq, 0);
 	}
 
diff --git a/iokernel/directpath/queues.c b/iokernel/directpath/queues.c
index ecd900d..edf67a0 100644
--- a/iokernel/directpath/queues.c
+++ b/iokernel/directpath/queues.c
@@ -141,7 +141,7 @@ bool directpath_poll_proc(struct proc *p, uint64_t *delay_cycles, uint64_t cur_t
 
 }
 
-void directpath_handle_completion_eqe(struct mlx5_eqe *eqe)
+static void directpath_handle_completion_eqe(struct mlx5_eqe *eqe)
 {
 	uint32_t cqn = be32toh(eqe->data.comp.cqn);
 	struct cq *cq = cqn_to_cq_map[cqn];
@@ -155,6 +155,60 @@ void directpath_handle_completion_eqe(struct mlx5_eqe *eqe)
 	ctx->nr_armed--;
 }
 
+
+void directpath_handle_completion_eqe_batch(struct mlx5_eqe **eqe, unsigned int nr)
+{
+	struct cq *cqs[nr];
+	struct directpath_ctx *ctxs[nr];
+	struct proc *ps[nr];
+
+	unsigned int i;
+	uint8_t qpidx;
+
+	if (nr < 2) {
+		for (i = 0; i < nr; i++)
+			directpath_handle_completion_eqe(eqe[i]);
+		return;
+	}
+
+	for (i = 0; i < nr + 4; i++) {
+
+		/* prefetch cqn to cq entry */
+		if (i < nr)
+			prefetch(&cqn_to_cq_map[be32toh(eqe[i]->data.comp.cqn)]);
+
+		/* dereference cqn to cq entry, prefetch cq */
+		if (i > 0 && i < nr + 1) {
+			cqs[i - 1] = cqn_to_cq_map[be32toh(eqe[i - 1]->data.comp.cqn)];
+			__builtin_prefetch(cqs[i - 1], 1, 0);
+		}
+
+		/* lookup and prefetch directpath context associated with cq */
+		if (i > 1 && i < nr + 2) {
+			qpidx = cqs[i - 2]->qp_idx;
+			/* mark cq as disarmed */
+			cqs[i - 2]->armed = false;
+			ctxs[i - 2] = container_of(cqs[i - 2], struct directpath_ctx, qps[qpidx].rx_cq);
+			__builtin_prefetch(ctxs[i - 2], 1, 0);
+		}
+
+		/* prefetch proc associated with context */
+		if (i > 2 && i < nr + 3) {
+			ps[i - 3] = ctxs[i - 3]->p;
+			/* decrement armed count in context */
+			ctxs[i - 3]->nr_armed--;
+			__builtin_prefetch(ps[i - 3], 1, 0);
+		}
+
+		/* add a core if the proc needs it */
+		if (i > 3) {
+			if (!sched_threads_active(ps[i - 4]))
+				sched_add_core(ps[i - 4]);
+		}
+	}
+}
+
+
 void directpath_handle_cq_error_eqe(struct mlx5_eqe *eqe)
 {
 	uint32_t cqn = be32toh(eqe->data.cq_err.cqn) & 0xffffff;
-- 
2.39.2

