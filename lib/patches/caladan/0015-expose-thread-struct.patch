From 7564f8feda421516cb1338f0f5479897a6313f31 Mon Sep 17 00:00:00 2001
From: Josh Fried <joshuafried@gmail.com>
Date: Tue, 14 Feb 2023 18:16:43 -0500
Subject: [PATCH 15/20] expose thread struct

---
 inc/runtime/thread.h | 85 +++++++++++++++++++++++++++++++++++++++++---
 runtime/defs.h       | 64 ---------------------------------
 runtime/sched.c      | 10 ------
 3 files changed, 81 insertions(+), 78 deletions(-)

diff --git a/inc/runtime/thread.h b/inc/runtime/thread.h
index ccc5380..10ed588 100644
--- a/inc/runtime/thread.h
+++ b/inc/runtime/thread.h
@@ -4,6 +4,7 @@
 
 #pragma once
 
+#include <base/list.h>
 #include <base/thread.h>
 #include <base/types.h>
 #include <base/compiler.h>
@@ -27,8 +28,6 @@ extern void thread_ready_head(thread_t *thread);
 extern thread_t *thread_create(thread_fn_t fn, void *arg);
 extern thread_t *thread_create_with_buf(thread_fn_t fn, void **buf, size_t len);
 extern thread_t *thread_create_nostack(thread_fn_t fn, void *arg);
-extern void __set_uthread_specific(thread_t *th, uint64_t val);
-extern uint64_t __get_uthread_specific(thread_t *th);
 extern void set_fsbase(thread_t *th, uint64_t fsbase);
 
 DECLARE_PERTHREAD(thread_t *, __self);
@@ -48,14 +47,92 @@ inline thread_t *thread_self(void)
 	return perthread_read_stable(__self);
 }
 
+/*
+ * Trap frame support
+ */
+
+/*
+ * See the "System V Application Binary Interface" for a full explation of
+ * calling and argument passing conventions.
+ */
+
+struct thread_tf {
+    /* argument registers, can be clobbered by callee */
+    uint64_t rdi; /* first argument */
+    uint64_t rsi;
+    uint64_t rdx;
+    uint64_t rcx;
+    uint64_t r8;
+    uint64_t r9;
+    uint64_t r10;
+    uint64_t r11;
+
+    /* callee-saved registers */
+    uint64_t rbx;
+    uint64_t rbp;
+    uint64_t r12;
+    uint64_t r13;
+    uint64_t r14;
+    uint64_t r15;
+
+    /* special-purpose registers */
+    uint64_t rax;   /* holds return value */
+    uint64_t rip;   /* instruction pointer */
+    uint64_t rsp;   /* stack pointer */
+    uint64_t fsbase; /* holds %fs */
+};
+
+#define ARG0(tf)        ((tf)->rdi)
+#define ARG1(tf)        ((tf)->rsi)
+#define ARG2(tf)        ((tf)->rdx)
+#define ARG3(tf)        ((tf)->rcx)
+#define ARG4(tf)        ((tf)->r8)
+#define ARG5(tf)        ((tf)->r9)
+
+
+/*
+ * Thread support
+ */
+
+struct stack;
+
+struct thread {
+    struct thread_tf    tf;
+    struct list_node    link;
+    struct stack        *stack;
+    unsigned int        main_thread:1;
+    unsigned int        has_fsbase:1;
+    unsigned int        thread_ready;
+    unsigned int        thread_running;
+    unsigned int        last_cpu;
+    uint64_t        run_start_tsc;
+    uint64_t        ready_tsc;
+    uint64_t        tlsvar;
+#ifdef GC
+    struct list_node    gc_link;
+    unsigned int        onk;
+#endif
+};
+
+
+static inline uint64_t __get_uthread_specific(thread_t *th)
+{
+    return th->tlsvar;
+}
+
+static inline void __set_uthread_specific(thread_t *th, uint64_t val)
+{
+    th->tlsvar = val;
+}
+
 static inline uint64_t get_uthread_specific(void)
 {
-    return __get_uthread_specific(thread_self());
+    return thread_self()->tlsvar;
 }
 
 static inline void set_uthread_specific(uint64_t val)
 {
-    __set_uthread_specific(thread_self(), val);
+    thread_self()->tlsvar = val;
 }
 
 
diff --git a/runtime/defs.h b/runtime/defs.h
index 295fce9..c08b82f 100644
--- a/runtime/defs.h
+++ b/runtime/defs.h
@@ -39,74 +39,10 @@
 #define RUNTIME_WATCHDOG_US		50
 #define RUNTIME_RX_BATCH_SIZE		32
 
-
-/*
- * Trap frame support
- */
-
-/*
- * See the "System V Application Binary Interface" for a full explation of
- * calling and argument passing conventions.
- */
-
-struct thread_tf {
-	/* argument registers, can be clobbered by callee */
-	uint64_t rdi; /* first argument */
-	uint64_t rsi;
-	uint64_t rdx;
-	uint64_t rcx;
-	uint64_t r8;
-	uint64_t r9;
-	uint64_t r10;
-	uint64_t r11;
-
-	/* callee-saved registers */
-	uint64_t rbx;
-	uint64_t rbp;
-	uint64_t r12;
-	uint64_t r13;
-	uint64_t r14;
-	uint64_t r15;
-
-	/* special-purpose registers */
-	uint64_t rax;	/* holds return value */
-	uint64_t rip;	/* instruction pointer */
-	uint64_t rsp;	/* stack pointer */
-	uint64_t fsbase; /* holds %fs */
-};
-
-#define ARG0(tf)        ((tf)->rdi)
-#define ARG1(tf)        ((tf)->rsi)
-#define ARG2(tf)        ((tf)->rdx)
-#define ARG3(tf)        ((tf)->rcx)
-#define ARG4(tf)        ((tf)->r8)
-#define ARG5(tf)        ((tf)->r9)
-
-
 /*
  * Thread support
  */
 
-struct stack;
-
-struct thread {
-	struct thread_tf	tf;
-	struct list_node	link;
-	struct stack		*stack;
-	unsigned int		main_thread:1;
-	unsigned int		has_fsbase:1;
-	unsigned int		thread_ready;
-	unsigned int		thread_running;
-	unsigned int		last_cpu;
-	uint64_t		run_start_tsc;
-	uint64_t		ready_tsc;
-	uint64_t		tlsvar;
-#ifdef GC
-	struct list_node	gc_link;
-	unsigned int		onk;
-#endif
-};
-
 typedef void (*runtime_fn_t)(void);
 
 /* assembly helper routines from switch.S */
diff --git a/runtime/sched.c b/runtime/sched.c
index 4f56ccf..ee7fcf0 100644
--- a/runtime/sched.c
+++ b/runtime/sched.c
@@ -44,16 +44,6 @@ static DEFINE_PERTHREAD(uint64_t, last_tsc);
  */
 thread_t *thread_self(void);
 
-uint64_t __get_uthread_specific(thread_t *th)
-{
-	return th->tlsvar;
-}
-
-void __set_uthread_specific(thread_t *th, uint64_t val)
-{
-	th->tlsvar = val;
-}
-
 void set_fsbase(thread_t *th, uint64_t fsbase)
 {
 	th->tf.fsbase = fsbase;
-- 
2.37.2

