From a210d6b7ed4d1dc02f951385e47797540bfba35f Mon Sep 17 00:00:00 2001
From: Josh Fried <joshuafried@gmail.com>
Date: Tue, 29 Nov 2022 15:59:55 -0500
Subject: [PATCH 05/20] base/runtime - make all runtime syscalls from a set
 instruction range

---
 Makefile           |  5 +++--
 base/mem.c         | 22 ++++---------------
 base/syscall.S     | 54 ++++++++++++++++++++++++++++++++++++++++++++++
 inc/base/syscall.h | 21 ++++++++++++++++++
 runtime/kthread.c  |  5 +++--
 runtime/preempt.c  | 38 ++++++++++++++++++++++++++------
 runtime/stack.c    |  7 +++---
 7 files changed, 120 insertions(+), 32 deletions(-)
 create mode 100644 base/syscall.S
 create mode 100644 inc/base/syscall.h

diff --git a/Makefile b/Makefile
index e3370e7..1b7b8fa 100644
--- a/Makefile
+++ b/Makefile
@@ -11,7 +11,8 @@ endif
 
 # libbase.a - the base library
 base_src = $(wildcard base/*.c)
-base_obj = $(base_src:.c=.o)
+base_asm = $(wildcard base/*.S)
+base_obj = $(base_src:.c=.o) $(base_asm:.S=.o)
 
 #libnet.a - a packet/networking utility library
 net_src = $(wildcard net/*.c)
@@ -68,7 +69,7 @@ $(test_targets): $(test_obj) libbase.a libruntime.a libnet.a base/base.ld
 
 # general build rules for all targets
 src = $(base_src) $(net_src) $(runtime_src) $(iokernel_src) $(test_src)
-asm = $(runtime_asm)
+asm = $(runtime_asm) $(base_asm)
 obj = $(src:.c=.o) $(asm:.S=.o)
 dep = $(obj:.o=.d)
 
diff --git a/base/mem.c b/base/mem.c
index 2781799..8e1314a 100644
--- a/base/mem.c
+++ b/base/mem.c
@@ -18,6 +18,7 @@
 #include <base/mem.h>
 #include <base/log.h>
 #include <base/limits.h>
+#include <base/syscall.h>
 
 #if !defined(MAP_HUGE_2MB) || !defined(MAP_HUGE_1GB)
 #warning "Your system does not support specifying MAP_HUGETLB page sizes"
@@ -33,21 +34,8 @@ int shmctl(int shm_id, int cmd, struct shmid_ds* buf);
 int shmdt(const void *addr);
 int shmget(key_t key, size_t size, int flags);
 
-long mbind(void *start, size_t len, int mode,
-	   const unsigned long *nmask, unsigned long maxnode,
-	   unsigned flags)
-{
-	return syscall(__NR_mbind, start, len, mode, nmask, maxnode, flags);
-}
-
-static void sigbus_error(int sig)
-{
-	panic("couldn't map pages");
-}
-
 static void touch_mapping(void *base, size_t len, size_t pgsize)
 {
-	__sighandler_t s;
 	char *pos;
 
 	/*
@@ -55,10 +43,8 @@ static void touch_mapping(void *base, size_t len, size_t pgsize)
 	 * because of insufficient memory. Therefore, we manually force a write
 	 * on each page to make sure the mapping was successful.
 	 */
-	s = signal(SIGBUS, sigbus_error);
 	for (pos = (char *)base; pos < (char *)base + len; pos += pgsize)
 		ACCESS_ONCE(*pos);
-	signal(SIGBUS, s);
 } 
 
 static void *
@@ -93,12 +79,12 @@ __mem_map_anom(void *base, size_t len, size_t pgsize,
 		return MAP_FAILED;
 	}
 
-	addr = mmap(base, len, PROT_READ | PROT_WRITE, flags, -1, 0);
-	if (addr == MAP_FAILED)
+	addr = syscall_mmap(base, len, PROT_READ | PROT_WRITE, flags, -1, 0);
+	if ((intptr_t)addr < 0)
 		return MAP_FAILED;
 
 	BUILD_ASSERT(sizeof(unsigned long) * 8 >= NNUMA);
-	if (mbind(addr, len, numa_policy, mask ? mask : NULL,
+	if (syscall_mbind(addr, len, numa_policy, mask ? mask : NULL,
 		  mask ? NNUMA + 1 : 0, MPOL_MF_STRICT | MPOL_MF_MOVE))
 		goto fail;
 
diff --git a/base/syscall.S b/base/syscall.S
new file mode 100644
index 0000000..d98d2e4
--- /dev/null
+++ b/base/syscall.S
@@ -0,0 +1,54 @@
+
+#include <asm/unistd_64.h>
+
+.section        .note.GNU-stack,"",@progbits
+.text
+.globl base_syscall_start
+base_syscall_start:
+
+.align 16
+.globl syscall_mmap
+syscall_mmap:
+	movl    $__NR_mmap, %eax
+	movq    %rcx, %r10
+	syscall
+	ret
+
+.align 16
+.globl syscall_mbind
+syscall_mbind:
+	movl    $__NR_mbind, %eax
+	movq    %rcx, %r10
+	syscall
+	ret
+
+.align 16
+.globl syscall_ioctl
+syscall_ioctl:
+	movl    $__NR_ioctl, %eax
+	syscall
+	ret
+
+.align 16
+.globl syscall_rt_sigreturn
+syscall_rt_sigreturn:
+	movl    $__NR_rt_sigreturn, %eax
+	syscall
+	ret
+
+.align 16
+.globl syscall_madvise
+syscall_madvise:
+	movl    $__NR_madvise, %eax
+	syscall
+	ret
+
+.align 16
+.globl syscall_mprotect
+syscall_mprotect:
+	movl    $__NR_mprotect, %eax
+	syscall
+	ret
+
+.globl base_syscall_end
+base_syscall_end:
diff --git a/inc/base/syscall.h b/inc/base/syscall.h
new file mode 100644
index 0000000..c10f9fb
--- /dev/null
+++ b/inc/base/syscall.h
@@ -0,0 +1,21 @@
+/*
+ * syscall.h - support for common syscalls in the base library
+ */
+
+#pragma once
+
+#include <stddef.h>
+#include <sys/types.h>
+
+extern const char base_syscall_start[];
+extern const char base_syscall_end[];
+
+extern void *syscall_mmap(void *addr, size_t length, int prot, int flags,
+	                      int fd, off_t offset);
+extern long syscall_mbind(void *start, size_t len, int mode,
+	                      const unsigned long *nmask, unsigned long maxnode,
+	                      unsigned flags);
+extern void syscall_rt_sigreturn(void);
+extern int syscall_ioctl(int fd, unsigned long int request, void *arg);
+extern int syscall_madvise(void *addr, size_t length, int advice);
+extern int syscall_mprotect(void *addr, size_t len, int prot);
\ No newline at end of file
diff --git a/runtime/kthread.c b/runtime/kthread.c
index 3ca9cc3..2a76890 100644
--- a/runtime/kthread.c
+++ b/runtime/kthread.c
@@ -13,6 +13,7 @@
 #include <base/list.h>
 #include <base/lock.h>
 #include <base/log.h>
+#include <base/syscall.h>
 #include <runtime/sync.h>
 #include <runtime/timer.h>
 
@@ -97,7 +98,7 @@ static __always_inline void kthread_yield_to_iokernel(void)
 	/* yield to the iokernel */
 	do {
 		clear_preempt_needed();
-		s = ioctl(ksched_fd, KSCHED_IOC_PARK, 0);
+		s = syscall_ioctl(ksched_fd, KSCHED_IOC_PARK, 0);
 	} while (unlikely(s < 0 || preempt_cede_needed(k)));
 
 	k->curr_cpu = s;
@@ -271,7 +272,7 @@ void kthread_wait_to_attach(void)
 	int s;
 
 	do {
-		s = ioctl(ksched_fd, KSCHED_IOC_START, 0);
+		s = syscall_ioctl(ksched_fd, KSCHED_IOC_START, 0);
 	} while (s < 0);
 
 	k->curr_cpu = s;
diff --git a/runtime/preempt.c b/runtime/preempt.c
index 98c4ea3..78f6493 100644
--- a/runtime/preempt.c
+++ b/runtime/preempt.c
@@ -5,9 +5,10 @@
 #include <signal.h>
 #include <string.h>
 
-#include "base/log.h"
-#include "runtime/thread.h"
-#include "runtime/preempt.h"
+#include <base/log.h>
+#include <base/syscall.h>
+#include <runtime/thread.h>
+#include <runtime/preempt.h>
 
 #include "defs.h"
 
@@ -96,6 +97,29 @@ int preempt_init_thread(void)
 	return 0;
 }
 
+#define SA_RESTORER 0x04000000
+
+/* copied from glibc sysdeps/unix/sysv/linux/kernel_sigaction.h */
+struct kernel_sigaction {
+	__sighandler_t k_sa_handler;
+	unsigned long sa_flags;
+	void (*sa_restorer) (void);
+	sigset_t sa_mask;
+};
+
+
+/* use our own sa_restorer instead of glibc's */
+static int _sigaction(int sig, const struct sigaction *act)
+{
+	struct kernel_sigaction kact;
+
+	kact.k_sa_handler = act->sa_handler;
+	memcpy(&kact.sa_mask, &act->sa_mask, sizeof(sigset_t));
+	kact.sa_flags = act->sa_flags | SA_RESTORER;
+	kact.sa_restorer = &syscall_rt_sigreturn;
+	return syscall(__NR_rt_sigaction, sig, &kact, NULL, 8);
+}
+
 /**
  * preempt_init - global initializer for preemption support
  *
@@ -113,15 +137,15 @@ int preempt_init(void)
 	}
 
 	act.sa_sigaction = handle_sigusr1;
-	if (sigaction(SIGUSR1, &act, NULL) == -1) {
+	if (_sigaction(SIGUSR1, &act) < 0) {
 		log_err("couldn't register signal handler");
-		return -errno;
+		return -1;
 	}
 
 	act.sa_sigaction = handle_sigusr2;
-	if (sigaction(SIGUSR2, &act, NULL) == -1) {
+	if (_sigaction(SIGUSR2, &act) < 0) {
 		log_err("couldn't register signal handler");
-		return -errno;
+		return -1;
 	}
 
 	return 0;
diff --git a/runtime/stack.c b/runtime/stack.c
index da6c3e9..787bdb7 100644
--- a/runtime/stack.c
+++ b/runtime/stack.c
@@ -10,6 +10,7 @@
 #include <base/atomic.h>
 #include <base/limits.h>
 #include <base/log.h>
+#include <base/syscall.h>
 
 #include "defs.h"
 
@@ -21,13 +22,13 @@ static struct stack *stack_create(void)
 	void *stack_addr;
 	struct stack *s;
 
-	stack_addr = mmap(NULL, sizeof(struct stack), PROT_READ | PROT_WRITE,
+	stack_addr = syscall_mmap(NULL, sizeof(struct stack), PROT_READ | PROT_WRITE,
 			  MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
 	if (stack_addr == MAP_FAILED)
 		return NULL;
 
 	s = (struct stack *)stack_addr;
-	if (mprotect(s->guard, RUNTIME_GUARD_SIZE, PROT_NONE) == - 1) {
+	if (syscall_mprotect(s->guard, RUNTIME_GUARD_SIZE, PROT_NONE) == - 1) {
 		munmap(stack_addr, sizeof(struct stack));
 		return NULL;
 	}
@@ -39,7 +40,7 @@ static struct stack *stack_create(void)
 static void stack_reclaim(struct stack *s)
 {
 	int ret;
-	ret = madvise(s->usable, RUNTIME_STACK_SIZE, MADV_DONTNEED);
+	ret = syscall_madvise(s->usable, RUNTIME_STACK_SIZE, MADV_DONTNEED);
 	WARN_ON_ONCE(ret);
 }
 
-- 
2.37.2

