From ebdcf2c9f91db95dc052cdfa77e8befeece7117a Mon Sep 17 00:00:00 2001
From: Josh Fried <joshuafried@gmail.com>
Date: Tue, 21 Nov 2023 16:00:02 -0500
Subject: [PATCH 31/31] thread and thread_tf updates

---
 inc/runtime/interruptible_wait.h |  5 +--
 inc/runtime/thread.h             | 52 +++++++++-----------------------
 runtime/defs.h                   |  2 +-
 runtime/interruptible_wait.c     |  1 -
 runtime/sched.c                  |  8 ++---
 runtime/switch.S                 |  3 +-
 6 files changed, 22 insertions(+), 49 deletions(-)

diff --git a/inc/runtime/interruptible_wait.h b/inc/runtime/interruptible_wait.h
index 4fc6333..8511a06 100644
--- a/inc/runtime/interruptible_wait.h
+++ b/inc/runtime/interruptible_wait.h
@@ -8,8 +8,9 @@
 #include <base/lock.h>
 #include <runtime/thread.h>
 
-extern bool sched_needs_signal_check(thread_t *th);
-extern void deliver_signals_jmp_thread(thread_t *th);
+static inline bool sched_needs_signal_check(thread_t *th) {
+	return th->junction_thread & !th->in_syscall;
+}
 
 // Returns true if this thread was interrupted.
 // @th must be thread_self().
diff --git a/inc/runtime/thread.h b/inc/runtime/thread.h
index b371b4a..c2e48b6 100644
--- a/inc/runtime/thread.h
+++ b/inc/runtime/thread.h
@@ -82,6 +82,7 @@ struct thread_tf {
     uint64_t rax;   /* holds return value */
     uint64_t rip;   /* instruction pointer */
     uint64_t rsp;   /* stack pointer */
+    uint64_t orig_rax;  /* second copy of rax, used for system call restarts */
     uint64_t fsbase; /* holds %fs */
 };
 
@@ -100,52 +101,27 @@ struct thread_tf {
 struct stack;
 
 struct thread {
-    struct thread_tf    tf;
-    struct list_node    link;
+    bool        main_thread:1;
+    bool        has_fsbase:1;
+    bool        thread_ready:1;
+    bool        junction_thread:1;
+    bool        thread_running;
+    bool        in_syscall;
+    atomic_t        interrupt_state;
+    struct thread_tf    *entry_regs;
+    unsigned long    junction_tstate_buf[20];
     struct stack        *stack;
-    unsigned int        main_thread:1;
-    unsigned int        has_fsbase:1;
-    unsigned int        thread_ready;
-    unsigned int        thread_running;
-    unsigned int        last_cpu;
-    unsigned int        cur_kthread;
-    uint64_t        run_start_tsc;
+    uint16_t        last_cpu;
+    uint16_t        cur_kthread;
     uint64_t        ready_tsc;
-    uint64_t        tlsvar;
-    atomic_t        interrupt_state;
-    unsigned long    junction_tstate_buf[24];
-
-    // Trapframe used by junction to stash registers on syscall entry
-    struct thread_tf    junction_tf;
-
+    struct thread_tf    tf;
+    struct list_node    link;
 #ifdef GC
     struct list_node    gc_link;
     unsigned int        onk;
 #endif
 };
 
-
-static inline uint64_t __get_uthread_specific(thread_t *th)
-{
-    return th->tlsvar;
-}
-
-static inline void __set_uthread_specific(thread_t *th, uint64_t val)
-{
-    th->tlsvar = val;
-}
-
-static inline uint64_t get_uthread_specific(void)
-{
-    return thread_self()->tlsvar;
-}
-
-static inline void set_uthread_specific(uint64_t val)
-{
-    thread_self()->tlsvar = val;
-}
-
-
 /*
  * High-level routines, use this API most of the time.
  */
diff --git a/runtime/defs.h b/runtime/defs.h
index fbc220e..dda5ed7 100644
--- a/runtime/defs.h
+++ b/runtime/defs.h
@@ -49,7 +49,7 @@ typedef void (*runtime_fn_t)(void);
 extern void __jmp_thread(struct thread_tf *tf);
 extern void __jmp_thread_direct(struct thread_tf *oldtf,
 				struct thread_tf *newtf,
-				unsigned int *thread_running);
+				bool *thread_running);
 extern void __jmp_runtime(struct thread_tf *tf, runtime_fn_t fn,
 			  void *stack);
 extern void __jmp_runtime_nosave(runtime_fn_t fn, void *stack) __noreturn;
diff --git a/runtime/interruptible_wait.c b/runtime/interruptible_wait.c
index 901ef84..0725eec 100644
--- a/runtime/interruptible_wait.c
+++ b/runtime/interruptible_wait.c
@@ -8,5 +8,4 @@
 #include "defs.h"
 
 // Junction overrides these symbols
-bool __weak sched_needs_signal_check(thread_t *th) { return false; }
 void __weak deliver_signals_jmp_thread(thread_t *th) {}
\ No newline at end of file
diff --git a/runtime/sched.c b/runtime/sched.c
index 4810995..629cd8a 100644
--- a/runtime/sched.c
+++ b/runtime/sched.c
@@ -78,7 +78,7 @@ static inline bool cores_have_affinity(unsigned int cpua, unsigned int cpub)
 static void jmp_thread(thread_t *th)
 {
 	assert_preempt_disabled();
-	assert(th->thread_ready);
+	assert(th->thread_ready == true);
 
 	perthread_store(__self, th);
 	th->thread_ready = false;
@@ -112,7 +112,7 @@ static void jmp_thread(thread_t *th)
 static void jmp_thread_direct(thread_t *oldth, thread_t *newth)
 {
 	assert_preempt_disabled();
-	assert(newth->thread_ready);
+	assert(newth->thread_ready == true);
 
 	perthread_store(__self, newth);
 	newth->thread_ready = false;
@@ -487,7 +487,6 @@ done:
 		STAT(REMOTE_RUNS)++;
 
 	/* update exported thread run start time */
-	th->run_start_tsc = perthread_get_stable(last_tsc);
 	ACCESS_ONCE(l->q_ptrs->run_start_tsc) = perthread_get_stable(last_tsc);
 
 	/* increment the RCU generation number (odd is in thread) */
@@ -547,7 +546,6 @@ static __always_inline void enter_schedule(thread_t *curth)
 	spin_unlock(&k->lock);
 
 	/* update exported thread run start time */
-	th->run_start_tsc = perthread_get_stable(last_tsc);
 	ACCESS_ONCE(k->q_ptrs->run_start_tsc) = perthread_get_stable(last_tsc);
 
 	/* increment the RCU generation number (odd is in thread) */
@@ -853,7 +851,7 @@ static __always_inline thread_t *__thread_create(void)
 	th->has_fsbase = false;
 	th->thread_ready = false;
 	th->thread_running = false;
-	th->tlsvar = 0;
+	th->junction_thread = false;
 	th->cur_kthread = NCPU;
 	atomic_write(&th->interrupt_state, 0);
 
diff --git a/runtime/switch.S b/runtime/switch.S
index 054ffed..000b290 100644
--- a/runtime/switch.S
+++ b/runtime/switch.S
@@ -36,7 +36,6 @@
 #define RAX	(112)	/* return code */
 #define RIP	(120)	/* instruction pointer */
 #define RSP	(128)	/* stack pointer */
-#define FSBASE	(136)	/* fsbase */
 
 /**
  * __jmp_thread - executes a thread from the runtime
@@ -119,7 +118,7 @@ __jmp_thread_direct:
 	movq    RIP(%rsi), %r8
 
 	/* clear the stack busy flag */
-	movl	$0, (%rdx)
+	movb	$0, (%rdx)
 
 	/* restore callee regs */
 	movq    RBX(%rsi), %rbx
-- 
2.34.1

