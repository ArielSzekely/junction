From 1accaebf354d08d94659b0c781b8a25406f196f2 Mon Sep 17 00:00:00 2001
From: Josh Fried <joshuafried@gmail.com>
Date: Tue, 22 Aug 2023 15:56:03 +0000
Subject: [PATCH 7/7] switch syscall format

---
 .gitignore                               |   1 +
 sysdeps/unix/sysv/linux/x86_64/clone.S   |  11 +--
 sysdeps/unix/sysv/linux/x86_64/clone3.S  |   7 +-
 sysdeps/unix/sysv/linux/x86_64/syscall.S |  17 +---
 sysdeps/unix/sysv/linux/x86_64/sysdep.h  | 110 ++++++++++++++---------
 sysdeps/unix/sysv/linux/x86_64/vfork.S   |   5 +-
 6 files changed, 86 insertions(+), 65 deletions(-)

diff --git a/.gitignore b/.gitignore
index 07d4a129e5..168f23a469 100644
--- a/.gitignore
+++ b/.gitignore
@@ -44,3 +44,4 @@ core
 /linuxthreads_db
 /rtkaio
 *.pyc
+build/
diff --git a/sysdeps/unix/sysv/linux/x86_64/clone.S b/sysdeps/unix/sysv/linux/x86_64/clone.S
index fc493f3585..f1fb69d487 100644
--- a/sysdeps/unix/sysv/linux/x86_64/clone.S
+++ b/sysdeps/unix/sysv/linux/x86_64/clone.S
@@ -73,14 +73,14 @@ ENTRY (__clone)
 	movq	%r8, %rdx
 	movq	%r9, %r8
 	mov	8(%rsp), %R10_LP
-	movl	$SYS_ify(clone),%eax
+	movl	$SYS_ify(clone), %eax
 
 	/* End FDE now, because in the child the unwind info will be
 	   wrong.  */
 	cfi_endproc;
 
-        sub $0x8, %rsp
-        call *(SYSTBL_NAME_ADDR(clone))
+	sub $0x8, %rsp
+	JCALL_PRESERVE
 
 	testq	%rax,%rax
 	jl	SYSCALL_ERROR_LABEL
@@ -104,8 +104,9 @@ L(thread_start):
 	call	*%rax
 	/* Call exit with return value from function call. */
 	movq	%rax, %rdi
-	movl	$SYS_ify(exit), %eax
-	syscall
+	subq $8, %rsp
+	push  $SYS_ify(exit)
+	JCALL_NOPRESERVE
 	cfi_endproc;
 
 	cfi_startproc;
diff --git a/sysdeps/unix/sysv/linux/x86_64/clone3.S b/sysdeps/unix/sysv/linux/x86_64/clone3.S
index 23e40e9dee..50521c4a3e 100644
--- a/sysdeps/unix/sysv/linux/x86_64/clone3.S
+++ b/sysdeps/unix/sysv/linux/x86_64/clone3.S
@@ -55,8 +55,9 @@ ENTRY (__clone3)
 	   wrong.  */
 	cfi_endproc
 
+	movl    $SYS_ify(clone3), %eax
 	sub $0x8, %rsp
-	call *(SYSTBL_NAME_ADDR(clone3))
+	JCALL_PRESERVE
 
 	test	%RAX_LP, %RAX_LP
 	jl	SYSCALL_ERROR_LABEL
@@ -80,7 +81,9 @@ L(thread_start):
 	movq	%rax, %rdi
 
 	and	$-16, %RSP_LP
-	call *(SYSTBL_NAME_ADDR(exit))
+	subq $8, %rsp
+	push $SYS_ify(exit)
+	JCALL_NOPRESERVE
 
 	cfi_endproc
 
diff --git a/sysdeps/unix/sysv/linux/x86_64/syscall.S b/sysdeps/unix/sysv/linux/x86_64/syscall.S
index 24e001cf77..9bd80ece73 100644
--- a/sysdeps/unix/sysv/linux/x86_64/syscall.S
+++ b/sysdeps/unix/sysv/linux/x86_64/syscall.S
@@ -27,25 +27,16 @@
 
 	.text
 ENTRY (syscall)
-	movq %rdi, %rax		/* Syscall number -> rax.  */
+	pushq %rdi 		/* Syscall number -> on stack.  */
 	movq %rsi, %rdi		/* shift arg1 - arg5.  */
 	movq %rdx, %rsi
 	movq %rcx, %rdx
 	movq %r8, %rcx
 	movq %r9, %r8
-	movq 8(%rsp),%r9	/* arg6 is on the stack.  */
+	movq 16(%rsp),%r9	/* arg6 is on the stack.  */
 
-	pushq %r15 // will use a callee-saved register (r15) to stash rsp
-        movq %rsp, %r15
-        andq $-16, %rsp // align the stack
-
-	shlq $3, %rax  	/* multiply syscall number by 8 */
-	addq $SYS_TBL_ADDR, %rax /* add table offset */
-	callq *(%rax) /* Do the system call.  */
-
-	// restore the stack
-        movq    %r15, %rsp
-        popq    %r15
+	JCALL_NOPRESERVE
+   addq $8, %rsp
 
 	cmpq $-4095, %rax	/* Check %rax for error.  */
 	jae SYSCALL_ERROR_LABEL	/* Jump to error handler if error.  */
diff --git a/sysdeps/unix/sysv/linux/x86_64/sysdep.h b/sysdeps/unix/sysv/linux/x86_64/sysdep.h
index 2fbf189dd4..e3ff7f1be0 100644
--- a/sysdeps/unix/sysv/linux/x86_64/sysdep.h
+++ b/sysdeps/unix/sysv/linux/x86_64/sysdep.h
@@ -33,8 +33,14 @@
 #undef SYS_ify
 #define SYS_TBL_ADDR 0x200000ULL
 #define SYS_ify(syscall_name)	__NR_##syscall_name
-#define SYSTBL_NAME_ADDR(syscall_name) (SYS_ify(syscall_name) * 8ULL + SYS_TBL_ADDR)
-#define SYSTBL_NR_ADDR(syscall_number) ((void *)(syscall_number * 8ULL + SYS_TBL_ADDR))
+
+#define JUNCTION_ENTRY_PRESERVE (SYS_TBL_ADDR + 8 * 454)
+#define JUNCTION_ENTRY_NOPRESERVE (SYS_TBL_ADDR + 8 * 453)
+#define JUNCTION_ENTRY_SS_PRESERVE (SYS_TBL_ADDR + 8 * 452)
+
+#define JCALL_NOPRESERVE call *(JUNCTION_ENTRY_NOPRESERVE)
+#define JCALL_PRESERVE call *(JUNCTION_ENTRY_PRESERVE)
+#define JCALL_SS_PRESERVE call *(JUNCTION_ENTRY_SS_PRESERVE)
 
 #ifdef __ASSEMBLER__
 
@@ -197,11 +203,11 @@
 # undef	DO_CALL
 # define DO_CALL(syscall_name, args, ulong_arg_1, ulong_arg_2) \
     DOARGS_##args				\
-    sub $0x8, %rsp; \
     ZERO_EXTEND_##ulong_arg_1			\
     ZERO_EXTEND_##ulong_arg_2			\
-    call *(SYSTBL_NAME_ADDR(syscall_name)); \
-    add $0x8, %rsp;
+    push $SYS_ify (syscall_name); \
+    JCALL_NOPRESERVE; \
+    addq $8, %rsp; \
 
 
 # define DOARGS_0 /* nothing */
@@ -243,76 +249,96 @@
 #define INTERNAL_SYSCALL_NCS(number, nr, args...)			\
 	internal_syscall##nr (number, args)
 
+#define DO_TYPIFY_AND_CALL(a1, a2, a3, a4, a5, a6, number) \
+({ \
+    long int (**fn)(__typeof__(a1), __typeof__(a2), __typeof__(a3), __typeof__(a4), __typeof__(a5), __typeof__(a6), int) = (void *)JUNCTION_ENTRY_NOPRESERVE;  \
+    (*fn)(a1, a2, a3, a4, a5, a6, number); \
+})
+
 #undef internal_syscall0
 #define internal_syscall0(number, dummy...)\
 ({                  \
-    long int (**fn)(void) = SYSTBL_NR_ADDR(number);  \
-    (*fn)(); \
+    register long arg1 asm ("rdi"); \
+    register long arg2 asm ("rsi"); \
+    register long arg3 asm ("rdx"); \
+    register long arg4 asm ("rcx"); \
+    register long arg5 asm ("r8");  \
+    register long arg6 asm ("r9");  \
+    DO_TYPIFY_AND_CALL(arg1, arg2, arg3, arg4, arg5, arg6, number); \
 })
 
+
 #undef internal_syscall1
 #define internal_syscall1(number, arg1) \
 ({                  \
-  TYPEFY (arg1, __arg1) = ARGIFY (arg1);        \
-  long int (**fn)(long) = SYSTBL_NR_ADDR(number);  \
-  (*fn)(__arg1); \
+    register TYPEFY (arg1, __arg1) asm ("rdi") = ARGIFY (arg1);        \
+    register long arg2 asm ("rsi"); \
+    register long arg3 asm ("rdx"); \
+    register long arg4 asm ("rcx"); \
+    register long arg5 asm ("r8"); \
+    register long arg6 asm ("r9"); \
+    DO_TYPIFY_AND_CALL(__arg1, arg2, arg3, arg4, arg5, arg6, number); \
 })
 
 #undef internal_syscall2
 #define internal_syscall2(number, arg1, arg2)				\
 ({									\
-    TYPEFY (arg2, __arg2) = ARGIFY (arg2);			 	\
-    TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
-    long int (**fn)(long, long) = SYSTBL_NR_ADDR(number);  \
-    (*fn)(__arg1, __arg2); \
+    register TYPEFY (arg1, __arg1) asm ("rdi") = ARGIFY (arg1);        \
+    register TYPEFY (arg2, __arg2) asm ("rsi") = ARGIFY (arg2);\
+    register long arg3 asm ("rdx"); \
+    register long arg4 asm ("rcx"); \
+    register long arg5 asm ("r8"); \
+    register long arg6 asm ("r9"); \
+    DO_TYPIFY_AND_CALL(__arg1, __arg2, arg3, arg4, arg5, arg6, number); \
 })
 
 #undef internal_syscall3
 #define internal_syscall3(number, arg1, arg2, arg3)			\
 ({									\
-    TYPEFY (arg3, __arg3) = ARGIFY (arg3);			 	\
-    TYPEFY (arg2, __arg2) = ARGIFY (arg2);			 	\
-    TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
-    long int (**fn)(long, long, long) = SYSTBL_NR_ADDR(number);  \
-    (*fn)(__arg1, __arg2, __arg3); \
+    register TYPEFY (arg1, __arg1) asm ("rdi") = ARGIFY (arg1);        \
+    register TYPEFY (arg2, __arg2) asm ("rsi") = ARGIFY (arg2); \
+    register TYPEFY (arg3, __arg3) asm ("rdx") = ARGIFY (arg3); \
+    register long arg4 asm ("rcx"); \
+    register long arg5 asm ("r8"); \
+    register long arg6 asm ("r9"); \
+    DO_TYPIFY_AND_CALL(__arg1, __arg2, __arg3, arg4, arg5, arg6, number); \
 })
 
 #undef internal_syscall4
 #define internal_syscall4(number, arg1, arg2, arg3, arg4)		\
 ({									\
-    TYPEFY (arg4, __arg4) = ARGIFY (arg4);			 	\
-    TYPEFY (arg3, __arg3) = ARGIFY (arg3);			 	\
-    TYPEFY (arg2, __arg2) = ARGIFY (arg2);			 	\
-    TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
-    long int (**fn)(long, long, long, long) = SYSTBL_NR_ADDR(number);  \
-    (*fn)(__arg1, __arg2, __arg3, __arg4); \
+    register TYPEFY (arg1, __arg1) asm ("rdi") = ARGIFY (arg1);        \
+    register TYPEFY (arg2, __arg2) asm ("rsi") = ARGIFY (arg2); \
+    register TYPEFY (arg3, __arg3) asm ("rdx") = ARGIFY (arg3); \
+    register TYPEFY (arg4, __arg4) asm ("rcx") = ARGIFY (arg4); \
+    register long arg5 asm ("r8"); \
+    register long arg6 asm ("r9"); \
+    DO_TYPIFY_AND_CALL(__arg1, __arg2, __arg3, __arg4, arg5, arg6, number); \
 })
 
 #undef internal_syscall5
 #define internal_syscall5(number, arg1, arg2, arg3, arg4, arg5)	\
 ({									\
-    TYPEFY (arg5, __arg5) = ARGIFY (arg5);			 	\
-    TYPEFY (arg4, __arg4) = ARGIFY (arg4);			 	\
-    TYPEFY (arg3, __arg3) = ARGIFY (arg3);			 	\
-    TYPEFY (arg2, __arg2) = ARGIFY (arg2);			 	\
-    TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
-    long int (**fn)(long, long, long, long, long) = SYSTBL_NR_ADDR(number);  \
-    (*fn)(__arg1, __arg2, __arg3, __arg4, __arg5); \
+    register TYPEFY (arg1, __arg1) asm ("rdi") = ARGIFY (arg1);        \
+    register TYPEFY (arg2, __arg2) asm ("rsi") = ARGIFY (arg2); \
+    register TYPEFY (arg3, __arg3) asm ("rdx") = ARGIFY (arg3); \
+    register TYPEFY (arg4, __arg4) asm ("rcx") = ARGIFY (arg4); \
+    register TYPEFY (arg5, __arg5) asm ("r8") = ARGIFY (arg5); \
+    register long arg6 asm ("r9"); \
+    DO_TYPIFY_AND_CALL(__arg1, __arg2, __arg3, __arg4, __arg5, arg6, number); \
 })
 
 #undef internal_syscall6
 #define internal_syscall6(number, arg1, arg2, arg3, arg4, arg5, arg6) \
 ({									\
-    TYPEFY (arg6, __arg6) = ARGIFY (arg6);			 	\
-    TYPEFY (arg5, __arg5) = ARGIFY (arg5);			 	\
-    TYPEFY (arg4, __arg4) = ARGIFY (arg4);			 	\
-    TYPEFY (arg3, __arg3) = ARGIFY (arg3);			 	\
-    TYPEFY (arg2, __arg2) = ARGIFY (arg2);			 	\
-    TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
-    long int (**fn)(long, long, long, long, long, long) = SYSTBL_NR_ADDR(number);  \
-    (*fn)(__arg1, __arg2, __arg3, __arg4, __arg5, __arg6); \
-  })
-
+    register TYPEFY (arg1, __arg1) asm ("rdi") = ARGIFY (arg1);        \
+    register TYPEFY (arg2, __arg2) asm ("rsi") = ARGIFY (arg2); \
+    register TYPEFY (arg3, __arg3) asm ("rdx") = ARGIFY (arg3); \
+    register TYPEFY (arg4, __arg4) asm ("rcx") = ARGIFY (arg4); \
+    register TYPEFY (arg5, __arg5) asm ("r8") = ARGIFY (arg5); \
+    register TYPEFY (arg6, __arg6) asm ("r9") = ARGIFY (arg6); \
+    DO_TYPIFY_AND_CALL(__arg1, __arg2, __arg3, __arg4, __arg5, __arg6, number); \
+})
 
 # define VDSO_NAME  "LINUX_2.6"
 # define VDSO_HASH  61765110
diff --git a/sysdeps/unix/sysv/linux/x86_64/vfork.S b/sysdeps/unix/sysv/linux/x86_64/vfork.S
index 20d683f717..4b4c2c7c41 100644
--- a/sysdeps/unix/sysv/linux/x86_64/vfork.S
+++ b/sysdeps/unix/sysv/linux/x86_64/vfork.S
@@ -33,9 +33,8 @@ ENTRY (__vfork)
 	cfi_adjust_cfa_offset(-8)
 	cfi_register(%rip, %rdi)
 
-	/* Stuff the syscall number in RAX and enter into the kernel.  */
-	movl	$SYS_ify (vfork), %eax
-	syscall
+	movl    $SYS_ify(vfork),%eax
+	JCALL_SS_PRESERVE
 
 	/* Push back the return PC.  */
 	pushq	%rdi
-- 
2.39.2

