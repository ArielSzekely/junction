From 6fba4c31ca1977587d0f62de14f743ba9f19a6c6 Mon Sep 17 00:00:00 2001
From: Josh Fried <joshuafried@gmail.com>
Date: Wed, 23 Nov 2022 17:12:56 -0500
Subject: [PATCH 3/7] glibc: hook some more syscalls

---
 sysdeps/unix/sysv/linux/kernel-features.h |  2 +-
 sysdeps/unix/sysv/linux/x86_64/clone.S    |  6 +++++-
 sysdeps/unix/sysv/linux/x86_64/clone3.S   | 25 +++++++++++++----------
 sysdeps/x86_64/nptl/tls.h                 |  9 +-------
 4 files changed, 21 insertions(+), 21 deletions(-)

diff --git a/sysdeps/unix/sysv/linux/kernel-features.h b/sysdeps/unix/sysv/linux/kernel-features.h
index 07b440f4eea..4cbee39ddbe 100644
--- a/sysdeps/unix/sysv/linux/kernel-features.h
+++ b/sysdeps/unix/sysv/linux/kernel-features.h
@@ -52,7 +52,7 @@
 /* Support for inter-process robust mutexes was added in 2.6.17 (but
    some architectures lack futex_atomic_cmpxchg_inatomic in some
    configurations).  */
-#define __ASSUME_SET_ROBUST_LIST	1
+//#define __ASSUME_SET_ROBUST_LIST	1
 
 /* Support for various CLOEXEC and NONBLOCK flags was added in
    2.6.27.  */
diff --git a/sysdeps/unix/sysv/linux/x86_64/clone.S b/sysdeps/unix/sysv/linux/x86_64/clone.S
index 55e9ac74934..fc493f35856 100644
--- a/sysdeps/unix/sysv/linux/x86_64/clone.S
+++ b/sysdeps/unix/sysv/linux/x86_64/clone.S
@@ -78,12 +78,16 @@ ENTRY (__clone)
 	/* End FDE now, because in the child the unwind info will be
 	   wrong.  */
 	cfi_endproc;
-	syscall
+
+        sub $0x8, %rsp
+        call *(SYSTBL_NAME_ADDR(clone))
 
 	testq	%rax,%rax
 	jl	SYSCALL_ERROR_LABEL
 	jz	L(thread_start)
 
+	add $0x8, %rsp
+
 	ret
 
 L(thread_start):
diff --git a/sysdeps/unix/sysv/linux/x86_64/clone3.S b/sysdeps/unix/sysv/linux/x86_64/clone3.S
index 802d56cbace..716cb5aca3f 100644
--- a/sysdeps/unix/sysv/linux/x86_64/clone3.S
+++ b/sysdeps/unix/sysv/linux/x86_64/clone3.S
@@ -47,22 +47,23 @@ ENTRY (__clone3)
 	test	%RDX_LP, %RDX_LP	/* No NULL function pointer.  */
 	jz	SYSCALL_ERROR_LABEL
 
-	/* Save the cl_args pointer in R8 which is preserved by the
-	   syscall.  */
-	mov	%RCX_LP, %R8_LP
-
-	/* Do the system call.  */
-	movl	$SYS_ify(clone3), %eax
+	/* Save the fun and args pointer in R12 and R13 which are preserved by the
+	   functon call.  */
+	mov	%RCX_LP, %R12_LP
+	mov	%RDX_LP, %R13_LP
 
 	/* End FDE now, because in the child the unwind info will be
 	   wrong.  */
 	cfi_endproc
-	syscall
+
+	sub $0x8, %rsp
+	call *(SYSTBL_NAME_ADDR(clone3))
 
 	test	%RAX_LP, %RAX_LP
 	jl	SYSCALL_ERROR_LABEL
 	jz	L(thread_start)
 
+	add $0x8, %rsp;
 	ret
 
 L(thread_start):
@@ -74,12 +75,14 @@ L(thread_start):
 	xorl	%ebp, %ebp
 
 	/* Set up arguments for the function call.  */
-	mov	%R8_LP, %RDI_LP	/* Argument.  */
-	call	*%rdx		/* Call function.  */
+	mov	%R12_LP, %RDI_LP	/* Argument.  */
+	call	*%r13		/* Call function.  */
 	/* Call exit with return value from function call. */
 	movq	%rax, %rdi
-	movl	$SYS_ify(exit), %eax
-	syscall
+
+	and	$-16, %RSP_LP
+	call *(SYSTBL_NAME_ADDR(exit))
+
 	cfi_endproc
 
 	cfi_startproc
diff --git a/sysdeps/x86_64/nptl/tls.h b/sysdeps/x86_64/nptl/tls.h
index 1403f939f7e..fa704b3c762 100644
--- a/sysdeps/x86_64/nptl/tls.h
+++ b/sysdeps/x86_64/nptl/tls.h
@@ -147,14 +147,7 @@ _Static_assert (offsetof (tcbhead_t, __glibc_unused2) == 0x80,
      _head->tcb = _thrdescr;						      \
      /* For now the thread descriptor is at the same address.  */	      \
      _head->self = _thrdescr;						      \
-									      \
-     /* It is a simple syscall to set the %fs value for the thread.  */	      \
-     asm volatile ("syscall"						      \
-		   : "=a" (_result)					      \
-		   : "0" ((unsigned long int) __NR_arch_prctl),		      \
-		     "D" ((unsigned long int) ARCH_SET_FS),		      \
-		     "S" (_thrdescr)					      \
-		   : "memory", "cc", "r11", "cx");			      \
+     _result = INTERNAL_SYSCALL(arch_prctl, 2, ARCH_SET_FS, _thrdescr);       \
 									      \
     _result == 0;							      \
   })
-- 
2.40.1

