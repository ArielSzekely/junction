From b7cfcdd21ca3fa8f152b9538b8ae22297a2ede6c Mon Sep 17 00:00:00 2001
From: Josh Fried <joshuafried@gmail.com>
Date: Mon, 13 Nov 2023 01:14:54 -0500
Subject: [PATCH 8/8] switch syscall format

---
 sysdeps/unix/sysv/linux/x86_64/clone.S   |  7 +++--
 sysdeps/unix/sysv/linux/x86_64/clone3.S  |  6 ++--
 sysdeps/unix/sysv/linux/x86_64/syscall.S | 14 ++-------
 sysdeps/unix/sysv/linux/x86_64/sysdep.h  | 39 ++++++++++++++++--------
 sysdeps/unix/sysv/linux/x86_64/vfork.S   |  3 +-
 5 files changed, 40 insertions(+), 29 deletions(-)

diff --git a/sysdeps/unix/sysv/linux/x86_64/clone.S b/sysdeps/unix/sysv/linux/x86_64/clone.S
index fc493f3585..c013a37bd3 100644
--- a/sysdeps/unix/sysv/linux/x86_64/clone.S
+++ b/sysdeps/unix/sysv/linux/x86_64/clone.S
@@ -79,8 +79,8 @@ ENTRY (__clone)
 	   wrong.  */
 	cfi_endproc;
 
-        sub $0x8, %rsp
-        call *(SYSTBL_NAME_ADDR(clone))
+	sub $0x8, %rsp
+	JCALL_PRESERVE
 
 	testq	%rax,%rax
 	jl	SYSCALL_ERROR_LABEL
@@ -105,7 +105,8 @@ L(thread_start):
 	/* Call exit with return value from function call. */
 	movq	%rax, %rdi
 	movl	$SYS_ify(exit), %eax
-	syscall
+
+	JCALL_NOPRESERVE
 	cfi_endproc;
 
 	cfi_startproc;
diff --git a/sysdeps/unix/sysv/linux/x86_64/clone3.S b/sysdeps/unix/sysv/linux/x86_64/clone3.S
index 23e40e9dee..f45989ffd7 100644
--- a/sysdeps/unix/sysv/linux/x86_64/clone3.S
+++ b/sysdeps/unix/sysv/linux/x86_64/clone3.S
@@ -56,7 +56,8 @@ ENTRY (__clone3)
 	cfi_endproc
 
 	sub $0x8, %rsp
-	call *(SYSTBL_NAME_ADDR(clone3))
+	movl    $SYS_ify(clone3), %eax
+	JCALL_PRESERVE
 
 	test	%RAX_LP, %RAX_LP
 	jl	SYSCALL_ERROR_LABEL
@@ -80,7 +81,8 @@ L(thread_start):
 	movq	%rax, %rdi
 
 	and	$-16, %RSP_LP
-	call *(SYSTBL_NAME_ADDR(exit))
+	movl    $SYS_ify(exit), %eax
+	JCALL_NOPRESERVE
 
 	cfi_endproc
 
diff --git a/sysdeps/unix/sysv/linux/x86_64/syscall.S b/sysdeps/unix/sysv/linux/x86_64/syscall.S
index 24e001cf77..85914e5967 100644
--- a/sysdeps/unix/sysv/linux/x86_64/syscall.S
+++ b/sysdeps/unix/sysv/linux/x86_64/syscall.S
@@ -35,17 +35,9 @@ ENTRY (syscall)
 	movq %r9, %r8
 	movq 8(%rsp),%r9	/* arg6 is on the stack.  */
 
-	pushq %r15 // will use a callee-saved register (r15) to stash rsp
-        movq %rsp, %r15
-        andq $-16, %rsp // align the stack
-
-	shlq $3, %rax  	/* multiply syscall number by 8 */
-	addq $SYS_TBL_ADDR, %rax /* add table offset */
-	callq *(%rax) /* Do the system call.  */
-
-	// restore the stack
-        movq    %r15, %rsp
-        popq    %r15
+   subq $8, %rsp
+	JCALL_NOPRESERVE
+   addq $8, %rsp
 
 	cmpq $-4095, %rax	/* Check %rax for error.  */
 	jae SYSCALL_ERROR_LABEL	/* Jump to error handler if error.  */
diff --git a/sysdeps/unix/sysv/linux/x86_64/sysdep.h b/sysdeps/unix/sysv/linux/x86_64/sysdep.h
index 2fbf189dd4..91f4823491 100644
--- a/sysdeps/unix/sysv/linux/x86_64/sysdep.h
+++ b/sysdeps/unix/sysv/linux/x86_64/sysdep.h
@@ -33,8 +33,15 @@
 #undef SYS_ify
 #define SYS_TBL_ADDR 0x200000ULL
 #define SYS_ify(syscall_name)	__NR_##syscall_name
-#define SYSTBL_NAME_ADDR(syscall_name) (SYS_ify(syscall_name) * 8ULL + SYS_TBL_ADDR)
-#define SYSTBL_NR_ADDR(syscall_number) ((void *)(syscall_number * 8ULL + SYS_TBL_ADDR))
+// #define SYSTBL_NAME_ADDR(syscall_name) (SYS_ify(syscall_name) * 8ULL + SYS_TBL_ADDR)
+// #define SYSTBL_NR_ADDR(syscall_number) ((void *)(syscall_number * 8ULL + SYS_TBL_ADDR))
+// #define JUNCTION_ENTRY 0x200e30
+
+#define JUNCTION_ENTRY_PRESERVE (SYS_TBL_ADDR + 8 * 454)
+#define JUNCTION_ENTRY_NOPRESERVE (SYS_TBL_ADDR + 8 * 453)
+
+#define JCALL_NOPRESERVE call *(JUNCTION_ENTRY_NOPRESERVE)
+#define JCALL_PRESERVE call *(JUNCTION_ENTRY_PRESERVE)
 
 #ifdef __ASSEMBLER__
 
@@ -200,7 +207,8 @@
     sub $0x8, %rsp; \
     ZERO_EXTEND_##ulong_arg_1			\
     ZERO_EXTEND_##ulong_arg_2			\
-    call *(SYSTBL_NAME_ADDR(syscall_name)); \
+    movl $SYS_ify (syscall_name), %eax; \
+    JCALL_NOPRESERVE; \
     add $0x8, %rsp;
 
 
@@ -246,16 +254,18 @@
 #undef internal_syscall0
 #define internal_syscall0(number, dummy...)\
 ({                  \
-    long int (**fn)(void) = SYSTBL_NR_ADDR(number);  \
+    long int (**fn)(void) = (void *)JUNCTION_ENTRY_NOPRESERVE;  \
+    asm volatile ("mov %0, %%eax" :  : "irm"(number) : "rax"); \
     (*fn)(); \
 })
 
 #undef internal_syscall1
 #define internal_syscall1(number, arg1) \
 ({                  \
-  TYPEFY (arg1, __arg1) = ARGIFY (arg1);        \
-  long int (**fn)(long) = SYSTBL_NR_ADDR(number);  \
-  (*fn)(__arg1); \
+    TYPEFY (arg1, __arg1) = ARGIFY (arg1);        \
+    long int (**fn)(long) = (void *)JUNCTION_ENTRY_NOPRESERVE;  \
+    asm volatile ("mov %0, %%eax" :  : "irm"(number) : "rax"); \
+    (*fn)(__arg1); \
 })
 
 #undef internal_syscall2
@@ -263,7 +273,8 @@
 ({									\
     TYPEFY (arg2, __arg2) = ARGIFY (arg2);			 	\
     TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
-    long int (**fn)(long, long) = SYSTBL_NR_ADDR(number);  \
+    long int (**fn)(long, long) = (void *)JUNCTION_ENTRY_NOPRESERVE;  \
+    asm volatile ("mov %0, %%eax" :  : "irm"(number) : "rax"); \
     (*fn)(__arg1, __arg2); \
 })
 
@@ -273,7 +284,8 @@
     TYPEFY (arg3, __arg3) = ARGIFY (arg3);			 	\
     TYPEFY (arg2, __arg2) = ARGIFY (arg2);			 	\
     TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
-    long int (**fn)(long, long, long) = SYSTBL_NR_ADDR(number);  \
+    long int (**fn)(long, long, long) = (void *)JUNCTION_ENTRY_NOPRESERVE;  \
+    asm volatile ("mov %0, %%eax" :  : "irm"(number) : "rax"); \
     (*fn)(__arg1, __arg2, __arg3); \
 })
 
@@ -284,7 +296,8 @@
     TYPEFY (arg3, __arg3) = ARGIFY (arg3);			 	\
     TYPEFY (arg2, __arg2) = ARGIFY (arg2);			 	\
     TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
-    long int (**fn)(long, long, long, long) = SYSTBL_NR_ADDR(number);  \
+    long int (**fn)(long, long, long, long) = (void *)JUNCTION_ENTRY_NOPRESERVE;  \
+    asm volatile ("mov %0, %%eax" :  : "irm"(number) : "rax"); \
     (*fn)(__arg1, __arg2, __arg3, __arg4); \
 })
 
@@ -296,7 +309,8 @@
     TYPEFY (arg3, __arg3) = ARGIFY (arg3);			 	\
     TYPEFY (arg2, __arg2) = ARGIFY (arg2);			 	\
     TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
-    long int (**fn)(long, long, long, long, long) = SYSTBL_NR_ADDR(number);  \
+    long int (**fn)(long, long, long, long, long) = (void *)JUNCTION_ENTRY_NOPRESERVE;  \
+    asm volatile ("mov %0, %%eax" :  : "irm"(number) : "rax"); \
     (*fn)(__arg1, __arg2, __arg3, __arg4, __arg5); \
 })
 
@@ -309,7 +323,8 @@
     TYPEFY (arg3, __arg3) = ARGIFY (arg3);			 	\
     TYPEFY (arg2, __arg2) = ARGIFY (arg2);			 	\
     TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
-    long int (**fn)(long, long, long, long, long, long) = SYSTBL_NR_ADDR(number);  \
+    long int (**fn)(long, long, long, long, long, long) = (void *)JUNCTION_ENTRY_NOPRESERVE;  \
+    asm volatile ("mov %0, %%eax" :  : "irm"(number) : "rax"); \
     (*fn)(__arg1, __arg2, __arg3, __arg4, __arg5, __arg6); \
   })
 
diff --git a/sysdeps/unix/sysv/linux/x86_64/vfork.S b/sysdeps/unix/sysv/linux/x86_64/vfork.S
index 7d8e789ab2..65e2323f22 100644
--- a/sysdeps/unix/sysv/linux/x86_64/vfork.S
+++ b/sysdeps/unix/sysv/linux/x86_64/vfork.S
@@ -35,7 +35,8 @@ ENTRY (__vfork)
 	cfi_adjust_cfa_offset(-8)
 	cfi_register(%rip, %rdi)
 
-	call *(SYSTBL_NR_ADDR(453))
+	movl    $SYS_ify (vfork), %eax
+	JCALL_PRESERVE
 
 	/* Push back the return PC.  */
 	pushq	%rdi
-- 
2.39.2

