// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod junction {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod ctl_schema {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_INNER_RESPONSE: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_INNER_RESPONSE: u8 = 4;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_INNER_RESPONSE: [InnerResponse; 5] = [
  InnerResponse::NONE,
  InnerResponse::error,
  InnerResponse::genericSuccess,
  InnerResponse::getStats,
  InnerResponse::traceReport,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct InnerResponse(pub u8);
#[allow(non_upper_case_globals)]
impl InnerResponse {
  pub const NONE: Self = Self(0);
  pub const error: Self = Self(1);
  pub const genericSuccess: Self = Self(2);
  pub const getStats: Self = Self(3);
  pub const traceReport: Self = Self(4);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 4;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::error,
    Self::genericSuccess,
    Self::getStats,
    Self::traceReport,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::error => Some("error"),
      Self::genericSuccess => Some("genericSuccess"),
      Self::getStats => Some("getStats"),
      Self::traceReport => Some("traceReport"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for InnerResponse {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for InnerResponse {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for InnerResponse {
    type Output = InnerResponse;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for InnerResponse {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for InnerResponse {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for InnerResponse {}
pub struct InnerResponseUnionTableOffset {}

pub enum SuccessResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SuccessResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SuccessResponse<'a> {
  type Inner = SuccessResponse<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SuccessResponse<'a> {

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SuccessResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    _args: &'args SuccessResponseArgs
  ) -> flatbuffers::WIPOffset<SuccessResponse<'bldr>> {
    let mut builder = SuccessResponseBuilder::new(_fbb);
    builder.finish()
  }

}

impl flatbuffers::Verifiable for SuccessResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .finish();
    Ok(())
  }
}
pub struct SuccessResponseArgs {
}
impl<'a> Default for SuccessResponseArgs {
  #[inline]
  fn default() -> Self {
    SuccessResponseArgs {
    }
  }
}

pub struct SuccessResponseBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SuccessResponseBuilder<'a, 'b, A> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SuccessResponseBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SuccessResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SuccessResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SuccessResponse<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SuccessResponse");
      ds.finish()
  }
}
pub enum ErrorResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ErrorResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ErrorResponse<'a> {
  type Inner = ErrorResponse<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ErrorResponse<'a> {
  pub const VT_MESSAGE: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ErrorResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ErrorResponseArgs<'args>
  ) -> flatbuffers::WIPOffset<ErrorResponse<'bldr>> {
    let mut builder = ErrorResponseBuilder::new(_fbb);
    if let Some(x) = args.message { builder.add_message(x); }
    builder.finish()
  }


  #[inline]
  pub fn message(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ErrorResponse::VT_MESSAGE, None)}
  }
}

impl flatbuffers::Verifiable for ErrorResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("message", Self::VT_MESSAGE, false)?
     .finish();
    Ok(())
  }
}
pub struct ErrorResponseArgs<'a> {
    pub message: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ErrorResponseArgs<'a> {
  #[inline]
  fn default() -> Self {
    ErrorResponseArgs {
      message: None,
    }
  }
}

pub struct ErrorResponseBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ErrorResponseBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_message(&mut self, message: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ErrorResponse::VT_MESSAGE, message);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ErrorResponseBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ErrorResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ErrorResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ErrorResponse<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ErrorResponse");
      ds.field("message", &self.message());
      ds.finish()
  }
}
pub enum GetStatsResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GetStatsResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GetStatsResponse<'a> {
  type Inner = GetStatsResponse<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GetStatsResponse<'a> {

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GetStatsResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    _args: &'args GetStatsResponseArgs
  ) -> flatbuffers::WIPOffset<GetStatsResponse<'bldr>> {
    let mut builder = GetStatsResponseBuilder::new(_fbb);
    builder.finish()
  }

}

impl flatbuffers::Verifiable for GetStatsResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .finish();
    Ok(())
  }
}
pub struct GetStatsResponseArgs {
}
impl<'a> Default for GetStatsResponseArgs {
  #[inline]
  fn default() -> Self {
    GetStatsResponseArgs {
    }
  }
}

pub struct GetStatsResponseBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GetStatsResponseBuilder<'a, 'b, A> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GetStatsResponseBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GetStatsResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GetStatsResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GetStatsResponse<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GetStatsResponse");
      ds.finish()
  }
}
pub enum TracePointOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TracePoint<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TracePoint<'a> {
  type Inner = TracePoint<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TracePoint<'a> {
  pub const VT_TIMESTAMP_US: flatbuffers::VOffsetT = 4;
  pub const VT_ACCESSED_LOCATION: flatbuffers::VOffsetT = 6;
  pub const VT_TYPE_STR: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TracePoint { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TracePointArgs<'args>
  ) -> flatbuffers::WIPOffset<TracePoint<'bldr>> {
    let mut builder = TracePointBuilder::new(_fbb);
    builder.add_accessed_location(args.accessed_location);
    builder.add_timestamp_us(args.timestamp_us);
    if let Some(x) = args.type_str { builder.add_type_str(x); }
    builder.finish()
  }


  #[inline]
  pub fn timestamp_us(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(TracePoint::VT_TIMESTAMP_US, Some(0)).unwrap()}
  }
  #[inline]
  pub fn accessed_location(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(TracePoint::VT_ACCESSED_LOCATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn type_str(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TracePoint::VT_TYPE_STR, None)}
  }
}

impl flatbuffers::Verifiable for TracePoint<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("timestamp_us", Self::VT_TIMESTAMP_US, false)?
     .visit_field::<u64>("accessed_location", Self::VT_ACCESSED_LOCATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_str", Self::VT_TYPE_STR, false)?
     .finish();
    Ok(())
  }
}
pub struct TracePointArgs<'a> {
    pub timestamp_us: u64,
    pub accessed_location: u64,
    pub type_str: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for TracePointArgs<'a> {
  #[inline]
  fn default() -> Self {
    TracePointArgs {
      timestamp_us: 0,
      accessed_location: 0,
      type_str: None,
    }
  }
}

pub struct TracePointBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TracePointBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_timestamp_us(&mut self, timestamp_us: u64) {
    self.fbb_.push_slot::<u64>(TracePoint::VT_TIMESTAMP_US, timestamp_us, 0);
  }
  #[inline]
  pub fn add_accessed_location(&mut self, accessed_location: u64) {
    self.fbb_.push_slot::<u64>(TracePoint::VT_ACCESSED_LOCATION, accessed_location, 0);
  }
  #[inline]
  pub fn add_type_str(&mut self, type_str: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TracePoint::VT_TYPE_STR, type_str);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TracePointBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TracePointBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TracePoint<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TracePoint<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TracePoint");
      ds.field("timestamp_us", &self.timestamp_us());
      ds.field("accessed_location", &self.accessed_location());
      ds.field("type_str", &self.type_str());
      ds.finish()
  }
}
pub enum TraceReportOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TraceReport<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TraceReport<'a> {
  type Inner = TraceReport<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TraceReport<'a> {
  pub const VT_TOTAL_PAGES: flatbuffers::VOffsetT = 4;
  pub const VT_NON_ZERO_PAGES: flatbuffers::VOffsetT = 6;
  pub const VT_ACCESSED_US: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TraceReport { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TraceReportArgs<'args>
  ) -> flatbuffers::WIPOffset<TraceReport<'bldr>> {
    let mut builder = TraceReportBuilder::new(_fbb);
    builder.add_non_zero_pages(args.non_zero_pages);
    builder.add_total_pages(args.total_pages);
    if let Some(x) = args.accessed_us { builder.add_accessed_us(x); }
    builder.finish()
  }


  #[inline]
  pub fn total_pages(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(TraceReport::VT_TOTAL_PAGES, Some(0)).unwrap()}
  }
  #[inline]
  pub fn non_zero_pages(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(TraceReport::VT_NON_ZERO_PAGES, Some(0)).unwrap()}
  }
  #[inline]
  pub fn accessed_us(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TracePoint<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TracePoint>>>>(TraceReport::VT_ACCESSED_US, None)}
  }
}

impl flatbuffers::Verifiable for TraceReport<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("total_pages", Self::VT_TOTAL_PAGES, false)?
     .visit_field::<u64>("non_zero_pages", Self::VT_NON_ZERO_PAGES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<TracePoint>>>>("accessed_us", Self::VT_ACCESSED_US, false)?
     .finish();
    Ok(())
  }
}
pub struct TraceReportArgs<'a> {
    pub total_pages: u64,
    pub non_zero_pages: u64,
    pub accessed_us: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TracePoint<'a>>>>>,
}
impl<'a> Default for TraceReportArgs<'a> {
  #[inline]
  fn default() -> Self {
    TraceReportArgs {
      total_pages: 0,
      non_zero_pages: 0,
      accessed_us: None,
    }
  }
}

pub struct TraceReportBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TraceReportBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_total_pages(&mut self, total_pages: u64) {
    self.fbb_.push_slot::<u64>(TraceReport::VT_TOTAL_PAGES, total_pages, 0);
  }
  #[inline]
  pub fn add_non_zero_pages(&mut self, non_zero_pages: u64) {
    self.fbb_.push_slot::<u64>(TraceReport::VT_NON_ZERO_PAGES, non_zero_pages, 0);
  }
  #[inline]
  pub fn add_accessed_us(&mut self, accessed_us: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<TracePoint<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TraceReport::VT_ACCESSED_US, accessed_us);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TraceReportBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TraceReportBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TraceReport<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TraceReport<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TraceReport");
      ds.field("total_pages", &self.total_pages());
      ds.field("non_zero_pages", &self.non_zero_pages());
      ds.field("accessed_us", &self.accessed_us());
      ds.finish()
  }
}
pub enum ResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Response<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Response<'a> {
  type Inner = Response<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Response<'a> {
  pub const VT_INNER_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_INNER: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Response { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ResponseArgs
  ) -> flatbuffers::WIPOffset<Response<'bldr>> {
    let mut builder = ResponseBuilder::new(_fbb);
    if let Some(x) = args.inner { builder.add_inner(x); }
    builder.add_inner_type(args.inner_type);
    builder.finish()
  }


  #[inline]
  pub fn inner_type(&self) -> InnerResponse {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<InnerResponse>(Response::VT_INNER_TYPE, Some(InnerResponse::NONE)).unwrap()}
  }
  #[inline]
  pub fn inner(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(Response::VT_INNER, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn inner_as_error(&self) -> Option<ErrorResponse<'a>> {
    if self.inner_type() == InnerResponse::error {
      self.inner().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { ErrorResponse::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn inner_as_generic_success(&self) -> Option<SuccessResponse<'a>> {
    if self.inner_type() == InnerResponse::genericSuccess {
      self.inner().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { SuccessResponse::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn inner_as_get_stats(&self) -> Option<GetStatsResponse<'a>> {
    if self.inner_type() == InnerResponse::getStats {
      self.inner().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { GetStatsResponse::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn inner_as_trace_report(&self) -> Option<TraceReport<'a>> {
    if self.inner_type() == InnerResponse::traceReport {
      self.inner().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { TraceReport::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for Response<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<InnerResponse, _>("inner_type", Self::VT_INNER_TYPE, "inner", Self::VT_INNER, false, |key, v, pos| {
        match key {
          InnerResponse::error => v.verify_union_variant::<flatbuffers::ForwardsUOffset<ErrorResponse>>("InnerResponse::error", pos),
          InnerResponse::genericSuccess => v.verify_union_variant::<flatbuffers::ForwardsUOffset<SuccessResponse>>("InnerResponse::genericSuccess", pos),
          InnerResponse::getStats => v.verify_union_variant::<flatbuffers::ForwardsUOffset<GetStatsResponse>>("InnerResponse::getStats", pos),
          InnerResponse::traceReport => v.verify_union_variant::<flatbuffers::ForwardsUOffset<TraceReport>>("InnerResponse::traceReport", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct ResponseArgs {
    pub inner_type: InnerResponse,
    pub inner: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for ResponseArgs {
  #[inline]
  fn default() -> Self {
    ResponseArgs {
      inner_type: InnerResponse::NONE,
      inner: None,
    }
  }
}

pub struct ResponseBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ResponseBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_inner_type(&mut self, inner_type: InnerResponse) {
    self.fbb_.push_slot::<InnerResponse>(Response::VT_INNER_TYPE, inner_type, InnerResponse::NONE);
  }
  #[inline]
  pub fn add_inner(&mut self, inner: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Response::VT_INNER, inner);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ResponseBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Response<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Response<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Response");
      ds.field("inner_type", &self.inner_type());
      match self.inner_type() {
        InnerResponse::error => {
          if let Some(x) = self.inner_as_error() {
            ds.field("inner", &x)
          } else {
            ds.field("inner", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        InnerResponse::genericSuccess => {
          if let Some(x) = self.inner_as_generic_success() {
            ds.field("inner", &x)
          } else {
            ds.field("inner", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        InnerResponse::getStats => {
          if let Some(x) = self.inner_as_get_stats() {
            ds.field("inner", &x)
          } else {
            ds.field("inner", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        InnerResponse::traceReport => {
          if let Some(x) = self.inner_as_trace_report() {
            ds.field("inner", &x)
          } else {
            ds.field("inner", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("inner", &x)
        },
      };
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Response`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_response_unchecked`.
pub fn root_as_response(buf: &[u8]) -> Result<Response, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Response>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Response` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_response_unchecked`.
pub fn size_prefixed_root_as_response(buf: &[u8]) -> Result<Response, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Response>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Response` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_response_unchecked`.
pub fn root_as_response_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Response<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Response<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Response` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_response_unchecked`.
pub fn size_prefixed_root_as_response_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Response<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Response<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Response and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Response`.
pub unsafe fn root_as_response_unchecked(buf: &[u8]) -> Response {
  flatbuffers::root_unchecked::<Response>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Response and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Response`.
pub unsafe fn size_prefixed_root_as_response_unchecked(buf: &[u8]) -> Response {
  flatbuffers::size_prefixed_root_unchecked::<Response>(buf)
}
#[inline]
pub fn finish_response_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Response<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_response_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Response<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod ctl_schema
}  // pub mod junction

